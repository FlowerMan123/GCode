{"data": ["{\"content\": \"Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.\\n(i.e.,  [0,1,2,4,5,6,7] might become  [4,5,6,7,0,1,2]).\\nFind the minimum element.\\nThe array may contain duplicates.\\nExample 1:\\nInput: [1,3,5]\\nOutput: 1\\nExample 2:\\nInput: [2,2,2,0,1]\\nOutput: 0\\nNote:\\nThis is a follow up problem to Find Minimum in Rotated Sorted Array.\\nWould allow duplicates affect the run-time complexity? How and why?\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array-ii\", \"title\": \"Find Minimum in Rotated Sorted Array II\"}", "{\"content\": \"Given an array nums of n integers and an integer target, find three integers in nums such that the sum is closest to target. Return the sum of the three integers. You may assume that each input would have exactly one solution.\\n  Example 1:\\nInput: nums = [-1,2,1,-4], target = 1\\nOutput: 2\\nExplanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).\\n  Constraints:\\n3 <= nums.length <= 10^3\\n-10^3 <= nums[i] <= 10^3\\n-10^4 <= target <= 10^4\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/3sum-closest\", \"title\": \"3Sum Closest\"}", "{\"content\": \"Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.\\nWe will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.\\n  Example 1:\\nInput: nums = [2,0,2,1,1,0]\\nOutput: [0,0,1,1,2,2]\\nExample 2:\\nInput: nums = [2,0,1]\\nOutput: [0,1,2]\\nExample 3:\\nInput: nums = [0]\\nOutput: [0]\\nExample 4:\\nInput: nums = [1]\\nOutput: [1]\\n  Constraints:\\nn == nums.length\\n1 <= n <= 300\\nnums[i] is 0, 1, or 2.\\n  Follow up:\\nCould you solve this problem without using the library's sort function?\\nCould you come up with a one-pass algorithm using only O(1) constant space?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/sort-colors\", \"title\": \"Sort Colors\"}", "{\"content\": \"You are given an n x n 2D matrix representing an image, rotate the image by 90 degrees (clockwise).\\nYou have to rotate the image in-place, which means you have to modify the input 2D matrix directly. DO NOT allocate another 2D matrix and do the rotation.\\n  Example 1:\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [[7,4,1],[8,5,2],[9,6,3]]\\nExample 2:\\nInput: matrix = [[5,1,9,11],[2,4,8,10],[13,3,6,7],[15,14,12,16]]\\nOutput: [[15,13,2,5],[14,3,4,1],[12,6,8,9],[16,7,10,11]]\\nExample 3:\\nInput: matrix = [[1]]\\nOutput: [[1]]\\nExample 4:\\nInput: matrix = [[1,2],[3,4]]\\nOutput: [[3,1],[4,2]]\\n  Constraints:\\nmatrix.length == n\\nmatrix[i].length == n\\n1 <= n <= 20\\n-1000 <= matrix[i][j] <= 1000\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/rotate-image\", \"title\": \"Rotate Image\"}", "{\"content\": \"Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.\\nAssume the environment does not allow you to store 64-bit integers (signed or unsigned).\\n  Example 1:\\nInput: x = 123\\nOutput: 321\\nExample 2:\\nInput: x = -123\\nOutput: -321\\nExample 3:\\nInput: x = 120\\nOutput: 21\\nExample 4:\\nInput: x = 0\\nOutput: 0\\n  Constraints:\\n-231 <= x <= 231 - 1\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/reverse-integer\", \"title\": \"Reverse Integer\"}", "{\"content\": \"The set [1, 2, 3, ..., n] contains a total of n! unique permutations.\\nBy listing and labeling all of the permutations in order, we get the following sequence for n = 3:\\n\\\"123\\\"\\n\\\"132\\\"\\n\\\"213\\\"\\n\\\"231\\\"\\n\\\"312\\\"\\n\\\"321\\\"\\nGiven n and k, return the kth permutation sequence.\\n  Example 1:\\nInput: n = 3, k = 3\\nOutput: \\\"213\\\"\\nExample 2:\\nInput: n = 4, k = 9\\nOutput: \\\"2314\\\"\\nExample 3:\\nInput: n = 3, k = 1\\nOutput: \\\"123\\\"\\n  Constraints:\\n1 <= n <= 9\\n1 <= k <= n!\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/permutation-sequence\", \"title\": \"Permutation Sequence\"}", "{\"content\": \"Given a string s, partition s such that every substring of the partition is a palindrome.\\nReturn the minimum cuts needed for a palindrome partitioning of s.\\n  Example 1:\\nInput: s = \\\"aab\\\"\\nOutput: 1\\nExplanation: The palindrome partitioning [\\\"aa\\\",\\\"b\\\"] could be produced using 1 cut.\\nExample 2:\\nInput: s = \\\"a\\\"\\nOutput: 0\\nExample 3:\\nInput: s = \\\"ab\\\"\\nOutput: 1\\n  Constraints:\\n1 <= s.length <= 2000\\ns consists of lower-case English letters only.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/palindrome-partitioning-ii\", \"title\": \"Palindrome Partitioning II\"}", "{\"content\": \"Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.\\n  Example 1:\\nInput: l1 = [1,2,4], l2 = [1,3,4]\\nOutput: [1,1,2,3,4,4]\\nExample 2:\\nInput: l1 = [], l2 = []\\nOutput: []\\nExample 3:\\nInput: l1 = [], l2 = [0]\\nOutput: [0]\\n  Constraints:\\nThe number of nodes in both lists is in the range [0, 50].\\n-100 <= Node.val <= 100\\nBoth l1 and l2 are sorted in non-decreasing order.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/merge-two-sorted-lists\", \"title\": \"Merge Two Sorted Lists\"}", "{\"content\": \"Given a sorted array nums, remove the duplicates in-place such that duplicates appeared at most twice and return the new length.\\nDo not allocate extra space for another array; you must do this by modifying the input array in-place with O(1) extra memory.\\nClarification:\\nConfused why the returned value is an integer, but your answer is an array?\\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller.\\nInternally you can think of this:\\n// nums is passed in by reference. (i.e., without making a copy)\\nint len = removeDuplicates(nums);\\n\\n// any modification to nums in your function would be known by the caller.\\n// using the length returned by your function, it prints the first len elements.\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n  Example 1:\\nInput: nums = [1,1,1,2,2,3]\\nOutput: 5, nums = [1,1,2,2,3]\\nExplanation: Your function should return length = 5, with the first five elements of nums being 1, 1, 2, 2 and 3 respectively. It doesn't matter what you leave beyond the returned length.\\nExample 2:\\nInput: nums = [0,0,1,1,1,1,2,3,3]\\nOutput: 7, nums = [0,0,1,1,2,3,3]\\nExplanation: Your function should return length = 7, with the first seven elements of nums being modified to 0, 0, 1, 1, 2, 3 and 3 respectively. It doesn't matter what values are set beyond the returned length.\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in ascending order.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii\", \"title\": \"Remove Duplicates from Sorted Array II\"}", "{\"content\": \"You are given a string s and an array of strings words of the same length. Return all starting indices of substring(s) in s that is a concatenation of each word in words exactly once, in any order, and without any intervening characters.\\nYou can return the answer in any order.\\n  Example 1:\\nInput: s = \\\"barfoothefoobarman\\\", words = [\\\"foo\\\",\\\"bar\\\"]\\nOutput: [0,9]\\nExplanation: Substrings starting at index 0 and 9 are \\\"barfoo\\\" and \\\"foobar\\\" respectively.\\nThe output order does not matter, returning [9,0] is fine too.\\nExample 2:\\nInput: s = \\\"wordgoodgoodgoodbestword\\\", words = [\\\"word\\\",\\\"good\\\",\\\"best\\\",\\\"word\\\"]\\nOutput: []\\nExample 3:\\nInput: s = \\\"barfoofoobarthefoobarman\\\", words = [\\\"bar\\\",\\\"foo\\\",\\\"the\\\"]\\nOutput: [6,9,12]\\n  Constraints:\\n1 <= s.length <= 104\\ns consists of lower-case English letters.\\n1 <= words.length <= 5000\\n1 <= words[i].length <= 30\\nwords[i] consists of lower-case English letters.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/substring-with-concatenation-of-all-words\", \"title\": \"Substring with Concatenation of All Words\"}", "{\"content\": \"Given the head of a linked list, remove the nth node from the end of the list and return its head.\\nFollow up: Could you do this in one pass?\\n  Example 1:\\nInput: head = [1,2,3,4,5], n = 2\\nOutput: [1,2,3,5]\\nExample 2:\\nInput: head = [1], n = 1\\nOutput: []\\nExample 3:\\nInput: head = [1,2], n = 1\\nOutput: [1]\\n  Constraints:\\nThe number of nodes in the list is sz.\\n1 <= sz <= 30\\n0 <= Node.val <= 100\\n1 <= n <= sz\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/remove-nth-node-from-end-of-list\", \"title\": \"Remove Nth Node From End of List\"}", "{\"content\": \"Given an integer array nums, find the contiguous subarray within an array (containing at least one number) which has the largest product.\\nExample 1:\\nInput: [2,3,-2,4]\\nOutput: 6\\nExplanation: [2,3] has the largest product 6.\\nExample 2:\\nInput: [-2,0,-1]\\nOutput: 0\\nExplanation: The result cannot be 2, because [-2,-1] is not a subarray.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/maximum-product-subarray\", \"title\": \"Maximum Product Subarray\"}", "{\"content\": \"Given the root of a binary tree, return the preorder traversal of its nodes' values.\\n  Example 1:\\nInput: root = [1,null,2,3]\\nOutput: [1,2,3]\\nExample 2:\\nInput: root = []\\nOutput: []\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\nExample 4:\\nInput: root = [1,2]\\nOutput: [1,2]\\nExample 5:\\nInput: root = [1,null,2]\\nOutput: [1,2]\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n  Follow up: Recursive solution is trivial, could you do it iteratively?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/binary-tree-preorder-traversal\", \"title\": \"Binary Tree Preorder Traversal\"}", "{\"content\": \"Given a binary tree, return the level order traversal of its nodes' values. (ie, from left to right, level by level).\\nFor example:\\nGiven binary tree [3,9,20,null,null,15,7],\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\nreturn its level order traversal as:\\n[\\n  [3],\\n  [9,20],\\n  [15,7]\\n]\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/binary-tree-level-order-traversal\", \"title\": \"Binary Tree Level Order Traversal\"}", "{\"content\": \"Given an array nums and a value val, remove all instances of that value in-place and return the new length.\\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\\nThe order of elements can be changed. It doesn't matter what you leave beyond the new length.\\nClarification:\\nConfused why the returned value is an integer but your answer is an array?\\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\\nInternally you can think of this:\\n// nums is passed in by reference. (i.e., without making a copy)\\nint len = removeElement(nums, val);\\n\\n// any modification to nums in your function would be known by the caller.\\n// using the length returned by your function, it prints the first len elements.\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n  Example 1:\\nInput: nums = [3,2,2,3], val = 3\\nOutput: 2, nums = [2,2]\\nExplanation: Your function should return length = 2, with the first two elements of nums being 2.\\nIt doesn't matter what you leave beyond the returned length. For example if you return 2 with nums = [2,2,3,3] or nums = [2,2,0,0], your answer will be accepted.\\nExample 2:\\nInput: nums = [0,1,2,2,3,0,4,2], val = 2\\nOutput: 5, nums = [0,1,4,0,3]\\nExplanation: Your function should return length = 5, with the first five elements of nums containing 0, 1, 3, 0, and 4. Note that the order of those five elements can be arbitrary. It doesn't matter what values are set beyond the returned length.\\n  Constraints:\\n0 <= nums.length <= 100\\n0 <= nums[i] <= 50\\n0 <= val <= 100\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/remove-element\", \"title\": \"Remove Element\"}", "{\"content\": \"Given a singly linked list L: L0→L1→…→Ln-1→Ln,\\nreorder it to: L0→Ln→L1→Ln-1→L2→Ln-2→…\\nYou may not modify the values in the list's nodes, only nodes itself may be changed.\\nExample 1:\\nGiven 1->2->3->4, reorder it to 1->4->2->3.\\nExample 2:\\nGiven 1->2->3->4->5, reorder it to 1->5->2->4->3.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/reorder-list\", \"title\": \"Reorder List\"}", "{\"content\": \"Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.\\nk is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.\\nFollow up:\\nCould you solve the problem in O(1) extra memory space?\\nYou may not alter the values in the list's nodes, only nodes itself may be changed.\\n  Example 1:\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [2,1,4,3,5]\\nExample 2:\\nInput: head = [1,2,3,4,5], k = 3\\nOutput: [3,2,1,4,5]\\nExample 3:\\nInput: head = [1,2,3,4,5], k = 1\\nOutput: [1,2,3,4,5]\\nExample 4:\\nInput: head = [1], k = 1\\nOutput: [1]\\n  Constraints:\\nThe number of nodes in the list is in the range sz.\\n1 <= sz <= 5000\\n0 <= Node.val <= 1000\\n1 <= k <= sz\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/reverse-nodes-in-k-group\", \"title\": \"Reverse Nodes in k-Group\"}", "{\"content\": \"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\\nNow consider if some obstacles are added to the grids. How many unique paths would there be?\\nAn obstacle and space is marked as 1 and 0 respectively in the grid.\\n  Example 1:\\nInput: obstacleGrid = [[0,0,0],[0,1,0],[0,0,0]]\\nOutput: 2\\nExplanation: There is one obstacle in the middle of the 3x3 grid above.\\nThere are two ways to reach the bottom-right corner:\\n1. Right -> Right -> Down -> Down\\n2. Down -> Down -> Right -> Right\\nExample 2:\\nInput: obstacleGrid = [[0,1],[0,0]]\\nOutput: 1\\n  Constraints:\\nm == obstacleGrid.length\\nn == obstacleGrid[i].length\\n1 <= m, n <= 100\\nobstacleGrid[i][j] is 0 or 1.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/unique-paths-ii\", \"title\": \"Unique Paths II\"}", "{\"content\": \"Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.\\nAn input string is valid if:\\nOpen brackets must be closed by the same type of brackets.\\nOpen brackets must be closed in the correct order.\\n  Example 1:\\nInput: s = \\\"()\\\"\\nOutput: true\\nExample 2:\\nInput: s = \\\"()[]{}\\\"\\nOutput: true\\nExample 3:\\nInput: s = \\\"(]\\\"\\nOutput: false\\nExample 4:\\nInput: s = \\\"([)]\\\"\\nOutput: false\\nExample 5:\\nInput: s = \\\"{[]}\\\"\\nOutput: true\\n  Constraints:\\n1 <= s.length <= 104\\ns consists of parentheses only '()[]{}'.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/valid-parentheses\", \"title\": \"Valid Parentheses\"}", "{\"content\": \"Design a data structure that follows the constraints of a Least Recently Used (LRU) cache.\\nImplement the LRUCache class:\\nLRUCache(int capacity) Initialize the LRU cache with positive size capacity.\\nint get(int key) Return the value of the key if the key exists, otherwise return -1.\\nvoid put(int key, int value) Update the value of the key if the key exists. Otherwise, add the key-value pair to the cache. If the number of keys exceeds the capacity from this operation, evict the least recently used key.\\nFollow up:\\nCould you do get and put in O(1) time complexity?\\n  Example 1:\\nInput\\n[\\\"LRUCache\\\", \\\"put\\\", \\\"put\\\", \\\"get\\\", \\\"put\\\", \\\"get\\\", \\\"put\\\", \\\"get\\\", \\\"get\\\", \\\"get\\\"]\\n[[2], [1, 1], [2, 2], [1], [3, 3], [2], [4, 4], [1], [3], [4]]\\nOutput\\n[null, null, null, 1, null, -1, null, -1, 3, 4]\\n\\nExplanation\\nLRUCache lRUCache = new LRUCache(2);\\nlRUCache.put(1, 1); // cache is {1=1}\\nlRUCache.put(2, 2); // cache is {1=1, 2=2}\\nlRUCache.get(1);    // return 1\\nlRUCache.put(3, 3); // LRU key was 2, evicts key 2, cache is {1=1, 3=3}\\nlRUCache.get(2);    // returns -1 (not found)\\nlRUCache.put(4, 4); // LRU key was 1, evicts key 1, cache is {4=4, 3=3}\\nlRUCache.get(1);    // return -1 (not found)\\nlRUCache.get(3);    // return 3\\nlRUCache.get(4);    // return 4\\n  Constraints:\\n1 <= capacity <= 3000\\n0 <= key <= 3000\\n0 <= value <= 104\\nAt most 3 * 104 calls will be made to get and put.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/lru-cache\", \"title\": \"LRU Cache\"}", "{\"content\": \"Implement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.\\nIf such an arrangement is not possible, it must rearrange it as the lowest possible order (i.e., sorted in ascending order).\\nThe replacement must be in place and use only constant extra memory.\\n  Example 1:\\nInput: nums = [1,2,3]\\nOutput: [1,3,2]\\nExample 2:\\nInput: nums = [3,2,1]\\nOutput: [1,2,3]\\nExample 3:\\nInput: nums = [1,1,5]\\nOutput: [1,5,1]\\nExample 4:\\nInput: nums = [1]\\nOutput: [1]\\n  Constraints:\\n1 <= nums.length <= 100\\n0 <= nums[i] <= 100\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/next-permutation\", \"title\": \"Next Permutation\"}", "{\"content\": \"Given the root of a binary tree, return the postorder traversal of its nodes' values.\\n  Example 1:\\nInput: root = [1,null,2,3]\\nOutput: [3,2,1]\\nExample 2:\\nInput: root = []\\nOutput: []\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\nExample 4:\\nInput: root = [1,2]\\nOutput: [2,1]\\nExample 5:\\nInput: root = [1,null,2]\\nOutput: [2,1]\\n  Constraints:\\nThe number of the nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n  Follow up:\\nRecursive solution is trivial, could you do it iteratively?\\n \", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/binary-tree-postorder-traversal\", \"title\": \"Binary Tree Postorder Traversal\"}", "{\"content\": \"There are N children standing in a line. Each child is assigned a rating value.\\nYou are giving candies to these children subjected to the following requirements:\\nEach child must have at least one candy.\\nChildren with a higher rating get more candies than their neighbors.\\nWhat is the minimum candies you must give?\\nExample 1:\\nInput: [1,0,2]\\nOutput: 5\\nExplanation: You can allocate to the first, second and third child with 2, 1, 2 candies respectively.\\nExample 2:\\nInput: [1,2,2]\\nOutput: 4\\nExplanation: You can allocate to the first, second and third child with 1, 2, 1 candies respectively.\\n             The third child gets 1 candy because it satisfies the above two conditions.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/candy\", \"title\": \"Candy\"}", "{\"content\": \"Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nDetermine if you are able to reach the last index.\\n  Example 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: true\\nExplanation: Jump 1 step from index 0 to 1, then 3 steps to the last index.\\nExample 2:\\nInput: nums = [3,2,1,0,4]\\nOutput: false\\nExplanation: You will always arrive at index 3 no matter what. Its maximum jump length is 0, which makes it impossible to reach the last index.\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n0 <= nums[i] <= 105\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/jump-game\", \"title\": \"Jump Game\"}", "{\"content\": \"Given a linked list, swap every two adjacent nodes and return its head.\\n  Example 1:\\nInput: head = [1,2,3,4]\\nOutput: [2,1,4,3]\\nExample 2:\\nInput: head = []\\nOutput: []\\nExample 3:\\nInput: head = [1]\\nOutput: [1]\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 100].\\n0 <= Node.val <= 100\\n  Follow up: Can you solve the problem without modifying the values in the list's nodes? (i.e., Only nodes themselves may be changed.)\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/swap-nodes-in-pairs\", \"title\": \"Swap Nodes in Pairs\"}", "{\"content\": \"Given an integer array nums where every element appears three times except for one, which appears exactly once. Find the single element and return it.\\n  Example 1:\\nInput: nums = [2,2,3,2]\\nOutput: 3\\nExample 2:\\nInput: nums = [0,1,0,1,0,1,99]\\nOutput: 99\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n-231 <= nums[i] <= 231 - 1\\nEach element in nums appears exactly three times except for one element which appears once.\\n  Follow up: Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/single-number-ii\", \"title\": \"Single Number II\"}", "{\"content\": \"Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right, which minimizes the sum of all numbers along its path.\\nNote: You can only move either down or right at any point in time.\\n  Example 1:\\nInput: grid = [[1,3,1],[1,5,1],[4,2,1]]\\nOutput: 7\\nExplanation: Because the path 1 → 3 → 1 → 1 → 1 minimizes the sum.\\nExample 2:\\nInput: grid = [[1,2,3],[4,5,6]]\\nOutput: 12\\n  Constraints:\\nm == grid.length\\nn == grid[i].length\\n1 <= m, n <= 200\\n0 <= grid[i][j] <= 100\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/minimum-path-sum\", \"title\": \"Minimum Path Sum\"}", "{\"content\": \"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, determine if s can be segmented into a space-separated sequence of one or more dictionary words.\\nNote:\\nThe same word in the dictionary may be reused multiple times in the segmentation.\\nYou may assume the dictionary does not contain duplicate words.\\nExample 1:\\nInput: s = \\\"leetcode\\\", wordDict = [\\\"leet\\\", \\\"code\\\"]\\nOutput: true\\nExplanation: Return true because \\\"leetcode\\\" can be segmented as \\\"leet code\\\".\\nExample 2:\\nInput: s = \\\"applepenapple\\\", wordDict = [\\\"apple\\\", \\\"pen\\\"]\\nOutput: true\\nExplanation: Return true because \\\"applepenapple\\\" can be segmented as \\\"apple pen apple\\\".\\n             Note that you are allowed to reuse a dictionary word.\\nExample 3:\\nInput: s = \\\"catsandog\\\", wordDict = [\\\"cats\\\", \\\"dog\\\", \\\"sand\\\", \\\"and\\\", \\\"cat\\\"]\\nOutput: false\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/word-break\", \"title\": \"Word Break\"}", "{\"content\": \"Given an array nums of n integers and an integer target, are there elements a, b, c, and d in nums such that a + b + c + d = target? Find all unique quadruplets in the array which gives the sum of target.\\nNotice that the solution set must not contain duplicate quadruplets.\\n  Example 1:\\nInput: nums = [1,0,-1,0,-2,2], target = 0\\nOutput: [[-2,-1,1,2],[-2,0,0,2],[-1,0,0,1]]\\nExample 2:\\nInput: nums = [], target = 0\\nOutput: []\\n  Constraints:\\n0 <= nums.length <= 200\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/4sum\", \"title\": \"4Sum\"}", "{\"content\": \"\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/subsets-ii\", \"title\": \"Subsets II\"}", "{\"content\": \"Given an array nums of n integers, are there elements a, b, c in nums such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.\\nNotice that the solution set must not contain duplicate triplets.\\n  Example 1:\\nInput: nums = [-1,0,1,2,-1,-4]\\nOutput: [[-1,-1,2],[-1,0,1]]\\nExample 2:\\nInput: nums = []\\nOutput: []\\nExample 3:\\nInput: nums = [0]\\nOutput: []\\n  Constraints:\\n0 <= nums.length <= 3000\\n-105 <= nums[i] <= 105\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/3sum\", \"title\": \"3Sum\"}", "{\"content\": \"Given an m x n board and a word, find if the word exists in the grid.\\nThe word can be constructed from letters of sequentially adjacent cells, where \\\"adjacent\\\" cells are horizontally or vertically neighboring. The same letter cell may not be used more than once.\\n  Example 1:\\nInput: board = [[\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"E\\\"],[\\\"S\\\",\\\"F\\\",\\\"C\\\",\\\"S\\\"],[\\\"A\\\",\\\"D\\\",\\\"E\\\",\\\"E\\\"]], word = \\\"ABCCED\\\"\\nOutput: true\\nExample 2:\\nInput: board = [[\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"E\\\"],[\\\"S\\\",\\\"F\\\",\\\"C\\\",\\\"S\\\"],[\\\"A\\\",\\\"D\\\",\\\"E\\\",\\\"E\\\"]], word = \\\"SEE\\\"\\nOutput: true\\nExample 3:\\nInput: board = [[\\\"A\\\",\\\"B\\\",\\\"C\\\",\\\"E\\\"],[\\\"S\\\",\\\"F\\\",\\\"C\\\",\\\"S\\\"],[\\\"A\\\",\\\"D\\\",\\\"E\\\",\\\"E\\\"]], word = \\\"ABCB\\\"\\nOutput: false\\n  Constraints:\\nm == board.length\\nn = board[i].length\\n1 <= m, n <= 200\\n1 <= word.length <= 103\\nboard and word consists only of lowercase and uppercase English letters.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/word-search\", \"title\": \"Word Search\"}", "{\"content\": \"Implement the myAtoi(string s) function, which converts a string to a 32-bit signed integer (similar to C/C++'s atoi function).\\nThe algorithm for myAtoi(string s) is as follows:\\nRead in and ignore any leading whitespace.\\nCheck if the next character (if not already at the end of the string) is '-' or '+'. Read this character in if it is either. This determines if the final result is negative or positive respectively. Assume the result is positive if neither is present.\\nRead in next the characters until the next non-digit charcter or the end of the input is reached. The rest of the string is ignored.\\nConvert these digits into an integer (i.e. \\\"123\\\" -> 123, \\\"0032\\\" -> 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).\\nIf the integer is out of the 32-bit signed integer range [-231, 231 - 1], then clamp the integer so that it remains in the range. Specifically, integers less than -231 should be clamped to -231, and integers greater than 231 - 1 should be clamped to 231 - 1.\\nReturn the integer as the final result.\\nNote:\\nOnly the space character ' ' is considered a whitespace character.\\nDo not ignore any characters other than the leading whitespace or the rest of the string after the digits.\\n  Example 1:\\nInput: s = \\\"42\\\"\\nOutput: 42\\nExplanation: The underlined characters are what is read in, the caret is the current reader position.\\nStep 1: \\\"42\\\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \\\"42\\\" (no characters read because there is neither a '-' nor '+')\\n         ^\\nStep 3: \\\"42\\\" (\\\"42\\\" is read in)\\n           ^\\nThe parsed integer is 42.\\nSince 42 is in the range [-231, 231 - 1], the final result is 42.\\nExample 2:\\nInput: s = \\\"   -42\\\"\\nOutput: -42\\nExplanation:\\nStep 1: \\\"   -42\\\" (leading whitespace is read and ignored)\\n            ^\\nStep 2: \\\"   -42\\\" ('-' is read, so the result should be negative)\\n             ^\\nStep 3: \\\"   -42\\\" (\\\"42\\\" is read in)\\n               ^\\nThe parsed integer is -42.\\nSince -42 is in the range [-231, 231 - 1], the final result is -42.\\nExample 3:\\nInput: s = \\\"4193 with words\\\"\\nOutput: 4193\\nExplanation:\\nStep 1: \\\"4193 with words\\\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \\\"4193 with words\\\" (no characters read because there is neither a '-' nor '+')\\n         ^\\nStep 3: \\\"4193 with words\\\" (\\\"4193\\\" is read in; reading stops because the next character is a non-digit)\\n             ^\\nThe parsed integer is 4193.\\nSince 4193 is in the range [-231, 231 - 1], the final result is 4193.\\nExample 4:\\nInput: s = \\\"words and 987\\\"\\nOutput: 0\\nExplanation:\\nStep 1: \\\"words and 987\\\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \\\"words and 987\\\" (no characters read because there is neither a '-' nor '+')\\n         ^\\nStep 3: \\\"words and 987\\\" (reading stops immediately because there is a non-digit 'w')\\n         ^\\nThe parsed integer is 0 because no digits were read.\\nSince 0 is in the range [-231, 231 - 1], the final result is 0.\\nExample 5:\\nInput: s = \\\"-91283472332\\\"\\nOutput: -2147483648\\nExplanation:\\nStep 1: \\\"-91283472332\\\" (no characters read because there is no leading whitespace)\\n         ^\\nStep 2: \\\"-91283472332\\\" ('-' is read, so the result should be negative)\\n          ^\\nStep 3: \\\"-91283472332\\\" (\\\"91283472332\\\" is read in)\\n                     ^\\nThe parsed integer is -91283472332.\\nSince -91283472332 is less than the lower bound of the range [-231, 231 - 1], the final result is clamped to -231 = -2147483648.\\n  Constraints:\\n0 <= s.length <= 200\\ns consists of English letters (lower-case and upper-case), digits (0-9), ' ', '+', '-', and '.'.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/string-to-integer-atoi\", \"title\": \"String to Integer (atoi)\"}", "{\"content\": \"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return all distinct solutions to the n-queens puzzle.\\nEach solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.\\n  Example 1:\\nInput: n = 4\\nOutput: [[\\\".Q..\\\",\\\"...Q\\\",\\\"Q...\\\",\\\"..Q.\\\"],[\\\"..Q.\\\",\\\"Q...\\\",\\\"...Q\\\",\\\".Q..\\\"]]\\nExplanation: There exist two distinct solutions to the 4-queens puzzle as shown above\\nExample 2:\\nInput: n = 1\\nOutput: [[\\\"Q\\\"]]\\n  Constraints:\\n1 <= n <= 9\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/n-queens\", \"title\": \"N-Queens\"}", "{\"content\": \"Given an m x n matrix. If an element is 0, set its entire row and column to 0. Do it in-place.\\nFollow up:\\nA straight forward solution using O(mn) space is probably a bad idea.\\nA simple improvement uses O(m + n) space, but still not the best solution.\\nCould you devise a constant space solution?\\n  Example 1:\\nInput: matrix = [[1,1,1],[1,0,1],[1,1,1]]\\nOutput: [[1,0,1],[0,0,0],[1,0,1]]\\nExample 2:\\nInput: matrix = [[0,1,2,0],[3,4,5,2],[1,3,1,5]]\\nOutput: [[0,0,0,0],[0,4,5,0],[0,3,1,0]]\\n  Constraints:\\nm == matrix.length\\nn == matrix[0].length\\n1 <= m, n <= 200\\n-231 <= matrix[i][j] <= 231 - 1\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/set-matrix-zeroes\", \"title\": \"Set Matrix Zeroes\"}", "{\"content\": \"Given preorder and inorder traversal of a tree, construct the binary tree.\\nNote:\\nYou may assume that duplicates do not exist in the tree.\\nFor example, given\\npreorder = [3,9,20,15,7]\\ninorder = [9,3,15,20,7]\\nReturn the following binary tree:\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal\", \"title\": \"Construct Binary Tree from Preorder and Inorder Traversal\"}", "{\"content\": \"Given a sorted array nums, remove the duplicates in-place such that each element appears only once and returns the new length.\\nDo not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.\\nClarification:\\nConfused why the returned value is an integer but your answer is an array?\\nNote that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.\\nInternally you can think of this:\\n// nums is passed in by reference. (i.e., without making a copy)\\nint len = removeDuplicates(nums);\\n\\n// any modification to nums in your function would be known by the caller.\\n// using the length returned by your function, it prints the first len elements.\\nfor (int i = 0; i < len; i++) {\\n    print(nums[i]);\\n}\\n  Example 1:\\nInput: nums = [1,1,2]\\nOutput: 2, nums = [1,2]\\nExplanation: Your function should return length = 2, with the first two elements of nums being 1 and 2 respectively. It doesn't matter what you leave beyond the returned length.\\nExample 2:\\nInput: nums = [0,0,1,1,1,2,2,3,3,4]\\nOutput: 5, nums = [0,1,2,3,4]\\nExplanation: Your function should return length = 5, with the first five elements of nums being modified to 0, 1, 2, 3, and 4 respectively. It doesn't matter what values are set beyond the returned length.\\n  Constraints:\\n0 <= nums.length <= 3 * 104\\n-104 <= nums[i] <= 104\\nnums is sorted in ascending order.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/remove-duplicates-from-sorted-array\", \"title\": \"Remove Duplicates from Sorted Array\"}", "{\"content\": \"Given strings s1, s2, and s3, find whether s3 is formed by an interleaving of s1 and s2.\\nAn interleaving of two strings s and t is a configuration where they are divided into non-empty substrings such that:\\ns = s1 + s2 + ... + sn\\nt = t1 + t2 + ... + tm\\n|n - m| <= 1\\nThe interleaving is s1 + t1 + s2 + t2 + s3 + t3 + ... or t1 + s1 + t2 + s2 + t3 + s3 + ...\\nNote: a + b is the concatenation of strings a and b.\\n  Example 1:\\nInput: s1 = \\\"aabcc\\\", s2 = \\\"dbbca\\\", s3 = \\\"aadbbcbcac\\\"\\nOutput: true\\nExample 2:\\nInput: s1 = \\\"aabcc\\\", s2 = \\\"dbbca\\\", s3 = \\\"aadbbbaccc\\\"\\nOutput: false\\nExample 3:\\nInput: s1 = \\\"\\\", s2 = \\\"\\\", s3 = \\\"\\\"\\nOutput: true\\n  Constraints:\\n0 <= s1.length, s2.length <= 100\\n0 <= s3.length <= 200\\ns1, s2, and s3 consist of lower-case English letters.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/interleaving-string\", \"title\": \"Interleaving String\"}", "{\"content\": \"The string \\\"PAYPALISHIRING\\\" is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)\\nP   A   H   N\\nA P L S I I G\\nY   I   R\\nAnd then read line by line: \\\"PAHNAPLSIIGYIR\\\"\\nWrite the code that will take a string and make this conversion given a number of rows:\\nstring convert(string s, int numRows);\\n  Example 1:\\nInput: s = \\\"PAYPALISHIRING\\\", numRows = 3\\nOutput: \\\"PAHNAPLSIIGYIR\\\"\\nExample 2:\\nInput: s = \\\"PAYPALISHIRING\\\", numRows = 4\\nOutput: \\\"PINALSIGYAHRPI\\\"\\nExplanation:\\nP     I    N\\nA   L S  I G\\nY A   H R\\nP     I\\nExample 3:\\nInput: s = \\\"A\\\", numRows = 1\\nOutput: \\\"A\\\"\\n  Constraints:\\n1 <= s.length <= 1000\\ns consists of English letters (lower-case and upper-case), ',' and '.'.\\n1 <= numRows <= 1000\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/zigzag-conversion\", \"title\": \"ZigZag Conversion\"}", "{\"content\": \"Given a string path, which is an absolute path (starting with a slash '/') to a file or directory in a Unix-style file system, convert it to the simplified canonical path.\\nIn a Unix-style file system, a period '.' refers to the current directory, a double period '..' refers to the directory up a level, and any multiple consecutive slashes (i.e. '//') are treated as a single slash '/'. For this problem, any other format of periods such as '...' are treated as file/directory names.\\nThe canonical path should have the following format:\\nThe path starts with a single slash '/'.\\nAny two directories are separated by a single slash '/'.\\nThe path does not end with a trailing '/'.\\nThe path only contains the directories on the path from the root directory to the target file or directory (i.e., no period '.' or double period '..')\\nReturn the simplified canonical path.\\n  Example 1:\\nInput: path = \\\"/home/\\\"\\nOutput: \\\"/home\\\"\\nExplanation: Note that there is no trailing slash after the last directory name.\\nExample 2:\\nInput: path = \\\"/../\\\"\\nOutput: \\\"/\\\"\\nExplanation: Going one level up from the root directory is a no-op, as the root level is the highest level you can go.\\nExample 3:\\nInput: path = \\\"/home//foo/\\\"\\nOutput: \\\"/home/foo\\\"\\nExplanation: In the canonical path, multiple consecutive slashes are replaced by a single one.\\nExample 4:\\nInput: path = \\\"/a/./b/../../c/\\\"\\nOutput: \\\"/c\\\"\\n  Constraints:\\n1 <= path.length <= 3000\\npath consists of English letters, digits, period '.', slash '/' or '_'.\\npath is a valid absolute Unix path.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/simplify-path\", \"title\": \"Simplify Path\"}", "{\"content\": \"Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.\\nIf the fractional part is repeating, enclose the repeating part in parentheses.\\nIf multiple answers are possible, return any of them.\\nIt is guaranteed that the length of the answer string is less than 104 for all the given inputs.\\n  Example 1:\\nInput: numerator = 1, denominator = 2\\nOutput: \\\"0.5\\\"\\nExample 2:\\nInput: numerator = 2, denominator = 1\\nOutput: \\\"2\\\"\\nExample 3:\\nInput: numerator = 2, denominator = 3\\nOutput: \\\"0.(6)\\\"\\nExample 4:\\nInput: numerator = 4, denominator = 333\\nOutput: \\\"0.(012)\\\"\\nExample 5:\\nInput: numerator = 1, denominator = 5\\nOutput: \\\"0.2\\\"\\n  Constraints:\\n-231 <= numerator, denominator <= 231 - 1\\ndenominator != 0\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/fraction-to-recurring-decimal\", \"title\": \"Fraction to Recurring Decimal\"}", "{\"content\": \"Given the head of a singly linked list where elements are sorted in ascending order, convert it to a height balanced BST.\\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\n  Example 1:\\nInput: head = [-10,-3,0,5,9]\\nOutput: [0,-3,9,-10,null,5]\\nExplanation: One possible answer is [0,-3,9,-10,null,5], which represents the shown height balanced BST.\\nExample 2:\\nInput: head = []\\nOutput: []\\nExample 3:\\nInput: head = [0]\\nOutput: [0]\\nExample 4:\\nInput: head = [1,3]\\nOutput: [3,1]\\n  Constraints:\\nThe number of nodes in head is in the range [0, 2 * 104].\\n-10^5 <= Node.val <= 10^5\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/convert-sorted-list-to-binary-search-tree\", \"title\": \"Convert Sorted List to Binary Search Tree\"}", "{\"content\": \"Given two words (beginWord and endWord), and a dictionary's word list, find all shortest transformation sequence(s) from beginWord to endWord, such that:\\nOnly one letter can be changed at a time\\nEach transformed word must exist in the word list. Note that beginWord is not a transformed word.\\nNote:\\nReturn an empty list if there is no such transformation sequence.\\nAll words have the same length.\\nAll words contain only lowercase alphabetic characters.\\nYou may assume no duplicates in the word list.\\nYou may assume beginWord and endWord are non-empty and are not the same.\\nExample 1:\\nInput:\\nbeginWord = \\\"hit\\\",\\nendWord = \\\"cog\\\",\\nwordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\\n\\nOutput:\\n[\\n  [\\\"hit\\\",\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"cog\\\"],\\n  [\\\"hit\\\",\\\"hot\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\\n]\\nExample 2:\\nInput:\\nbeginWord = \\\"hit\\\"\\nendWord = \\\"cog\\\"\\nwordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"]\\n\\nOutput: []\\n\\nExplanation: The endWord \\\"cog\\\" is not in wordList, therefore no possible transformation.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/word-ladder-ii\", \"title\": \"Word Ladder II\"}", "{\"content\": \"Given two strings s and t, return the minimum window in s which will contain all the characters in t. If there is no such window in s that covers all characters in t, return the empty string \\\"\\\".\\nNote that If there is such a window, it is guaranteed that there will always be only one unique minimum window in s.\\n  Example 1:\\nInput: s = \\\"ADOBECODEBANC\\\", t = \\\"ABC\\\"\\nOutput: \\\"BANC\\\"\\nExample 2:\\nInput: s = \\\"a\\\", t = \\\"a\\\"\\nOutput: \\\"a\\\"\\n  Constraints:\\n1 <= s.length, t.length <= 105\\ns and t consist of English letters.\\n  Follow up: Could you find an algorithm that runs in O(n) time?\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/minimum-window-substring\", \"title\": \"Minimum Window Substring\"}", "{\"content\": \"Given two sorted integer arrays nums1 and nums2, merge nums2 into nums1 as one sorted array.\\nThe number of elements initialized in nums1 and nums2 are m and n respectively. You may assume that nums1 has a size equal to m + n such that it has enough space to hold additional elements from nums2.\\n  Example 1:\\nInput: nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3\\nOutput: [1,2,2,3,5,6]\\nExample 2:\\nInput: nums1 = [1], m = 1, nums2 = [], n = 0\\nOutput: [1]\\n  Constraints:\\nnums1.length == m + n\\nnums2.length == n\\n0 <= m, n <= 200\\n1 <= m + n <= 200\\n-109 <= nums1[i], nums2[i] <= 109\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/merge-sorted-array\", \"title\": \"Merge Sorted Array\"}", "{\"content\": \"Given two strings s and t, return the number of distinct subsequences of s which equals t.\\nA string's subsequence is a new string formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., \\\"ACE\\\" is a subsequence of \\\"ABCDE\\\" while \\\"AEC\\\" is not).\\nIt's guaranteed the answer fits on a 32-bit signed integer.\\n  Example 1:\\nInput: s = \\\"rabbbit\\\", t = \\\"rabbit\\\"\\nOutput: 3\\nExplanation:\\nAs shown below, there are 3 ways you can generate \\\"rabbit\\\" from S.\\nrabbbit\\nrabbbit\\nrabbbit\\nExample 2:\\nInput: s = \\\"babgbag\\\", t = \\\"bag\\\"\\nOutput: 5\\nExplanation:\\nAs shown below, there are 5 ways you can generate \\\"bag\\\" from S.\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\nbabgbag\\n  Constraints:\\n0 <= s.length, t.length <= 1000\\ns and t consist of English letters.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/distinct-subsequences\", \"title\": \"Distinct Subsequences\"}", "{\"content\": \"Evaluate the value of an arithmetic expression in Reverse Polish Notation.\\nValid operators are +, -, *, /. Each operand may be an integer or another expression.\\nNote:\\nDivision between two integers should truncate toward zero.\\nThe given RPN expression is always valid. That means the expression would always evaluate to a result and there won't be any divide by zero operation.\\nExample 1:\\nInput: [\\\"2\\\", \\\"1\\\", \\\"+\\\", \\\"3\\\", \\\"*\\\"]\\nOutput: 9\\nExplanation: ((2 + 1) * 3) = 9\\nExample 2:\\nInput: [\\\"4\\\", \\\"13\\\", \\\"5\\\", \\\"/\\\", \\\"+\\\"]\\nOutput: 6\\nExplanation: (4 + (13 / 5)) = 6\\nExample 3:\\nInput: [\\\"10\\\", \\\"6\\\", \\\"9\\\", \\\"3\\\", \\\"+\\\", \\\"-11\\\", \\\"*\\\", \\\"/\\\", \\\"*\\\", \\\"17\\\", \\\"+\\\", \\\"5\\\", \\\"+\\\"]\\nOutput: 22\\nExplanation: \\n  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5\\n= ((10 * (6 / (12 * -11))) + 17) + 5\\n= ((10 * (6 / -132)) + 17) + 5\\n= ((10 * 0) + 17) + 5\\n= (0 + 17) + 5\\n= 17 + 5\\n= 22\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/evaluate-reverse-polish-notation\", \"title\": \"Evaluate Reverse Polish Notation\"}", "{\"content\": \"Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.\\nThe digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.\\nYou may assume the integer does not contain any leading zero, except the number 0 itself.\\n  Example 1:\\nInput: digits = [1,2,3]\\nOutput: [1,2,4]\\nExplanation: The array represents the integer 123.\\nExample 2:\\nInput: digits = [4,3,2,1]\\nOutput: [4,3,2,2]\\nExplanation: The array represents the integer 4321.\\nExample 3:\\nInput: digits = [0]\\nOutput: [1]\\n  Constraints:\\n1 <= digits.length <= 100\\n0 <= digits[i] <= 9\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/plus-one\", \"title\": \"Plus One\"}", "{\"content\": \"Given two integers dividend and divisor, divide two integers without using multiplication, division, and mod operator.\\nReturn the quotient after dividing dividend by divisor.\\nThe integer division should truncate toward zero, which means losing its fractional part. For example, truncate(8.345) = 8 and truncate(-2.7335) = -2.\\nNote:\\nAssume we are dealing with an environment that could only store integers within the 32-bit signed integer range: [−231,  231 − 1]. For this problem, assume that your function returns 231 − 1 when the division result overflows.\\n  Example 1:\\nInput: dividend = 10, divisor = 3\\nOutput: 3\\nExplanation: 10/3 = truncate(3.33333..) = 3.\\nExample 2:\\nInput: dividend = 7, divisor = -3\\nOutput: -2\\nExplanation: 7/-3 = truncate(-2.33333..) = -2.\\nExample 3:\\nInput: dividend = 0, divisor = 1\\nOutput: 0\\nExample 4:\\nInput: dividend = 1, divisor = 1\\nOutput: 1\\n  Constraints:\\n-231 <= dividend, divisor <= 231 - 1\\ndivisor != 0\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/divide-two-integers\", \"title\": \"Divide Two Integers\"}", "{\"content\": \"Say you have an array for which the ith element is the price of a given stock on day i.\\nDesign an algorithm to find the maximum profit. You may complete at most two transactions.\\nNote: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\\n  Example 1:\\nInput: prices = [3,3,5,0,0,3,1,4]\\nOutput: 6\\nExplanation: Buy on day 4 (price = 0) and sell on day 6 (price = 3), profit = 3-0 = 3.\\nThen buy on day 7 (price = 1) and sell on day 8 (price = 4), profit = 4-1 = 3.\\nExample 2:\\nInput: prices = [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\nNote that you cannot buy on day 1, buy on day 2 and sell them later, as you are engaging multiple transactions at the same time. You must sell before buying again.\\nExample 3:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\\nExample 4:\\nInput: prices = [1]\\nOutput: 0\\n  Constraints:\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 105\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-iii\", \"title\": \"Best Time to Buy and Sell Stock III\"}", "{\"content\": \"Given a string s, find the length of the longest substring without repeating characters.\\n  Example 1:\\nInput: s = \\\"abcabcbb\\\"\\nOutput: 3\\nExplanation: The answer is \\\"abc\\\", with the length of 3.\\nExample 2:\\nInput: s = \\\"bbbbb\\\"\\nOutput: 1\\nExplanation: The answer is \\\"b\\\", with the length of 1.\\nExample 3:\\nInput: s = \\\"pwwkew\\\"\\nOutput: 3\\nExplanation: The answer is \\\"wke\\\", with the length of 3.\\nNotice that the answer must be a substring, \\\"pwke\\\" is a subsequence and not a substring.\\nExample 4:\\nInput: s = \\\"\\\"\\nOutput: 0\\n  Constraints:\\n0 <= s.length <= 5 * 104\\ns consists of English letters, digits, symbols and spaces.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/longest-substring-without-repeating-characters\", \"title\": \"Longest Substring Without Repeating Characters\"}", "{\"content\": \"Given a rows x cols binary matrix filled with 0's and 1's, find the largest rectangle containing only 1's and return its area.\\n  Example 1:\\nInput: matrix = [[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\",\\\"0\\\"],[\\\"1\\\",\\\"0\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],[\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\",\\\"1\\\"],[\\\"1\\\",\\\"0\\\",\\\"0\\\",\\\"1\\\",\\\"0\\\"]]\\nOutput: 6\\nExplanation: The maximal rectangle is shown in the above picture.\\nExample 2:\\nInput: matrix = []\\nOutput: 0\\nExample 3:\\nInput: matrix = [[\\\"0\\\"]]\\nOutput: 0\\nExample 4:\\nInput: matrix = [[\\\"1\\\"]]\\nOutput: 1\\nExample 5:\\nInput: matrix = [[\\\"0\\\",\\\"0\\\"]]\\nOutput: 0\\n  Constraints:\\nrows == matrix.length\\ncols == matrix.length\\n0 <= row, cols <= 200\\nmatrix[i][j] is '0' or '1'.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/maximal-rectangle\", \"title\": \"Maximal Rectangle\"}", "{\"content\": \"\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/implement-strstr\", \"title\": \"Implement strStr()\"}", "{\"content\": \"A transformation sequence from word beginWord to word endWord using a dictionary wordList is a sequence of words such that:\\nThe first word in the sequence is beginWord.\\nThe last word in the sequence is endWord.\\nOnly one letter is different between each adjacent pair of words in the sequence.\\nEvery word in the sequence is in wordList.\\nGiven two words, beginWord and endWord, and a dictionary wordList, return the number of words in the shortest transformation sequence from beginWord to endWord, or 0 if no such sequence exists.\\n  Example 1:\\nInput: beginWord = \\\"hit\\\", endWord = \\\"cog\\\", wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\",\\\"cog\\\"]\\nOutput: 5\\nExplanation: One shortest transformation is \\\"hit\\\" -> \\\"hot\\\" -> \\\"dot\\\" -> \\\"dog\\\" -> \\\"cog\\\" with 5 words.\\nExample 2:\\nInput: beginWord = \\\"hit\\\", endWord = \\\"cog\\\", wordList = [\\\"hot\\\",\\\"dot\\\",\\\"dog\\\",\\\"lot\\\",\\\"log\\\"]\\nOutput: 0\\nExplanation: The endWord \\\"cog\\\" is not in wordList, therefore there is no possible transformation.\\n  Constraints:\\n1 <= beginWord.length <= 10\\nendWord.length == beginWord.length\\n1 <= wordList.length <= 5000\\nwordList[i].length == beginWord.length\\nbeginWord, endWord, and wordList[i] consist of lowercase English letters.\\nbeginWord != endWord\\nAll the strings in wordList are unique.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/word-ladder\", \"title\": \"Word Ladder\"}", "{\"content\": \"Given an unsorted integer array nums, find the smallest missing positive integer.\\n  Example 1:\\nInput: nums = [1,2,0]\\nOutput: 3\\nExample 2:\\nInput: nums = [3,4,-1,1]\\nOutput: 2\\nExample 3:\\nInput: nums = [7,8,9,11,12]\\nOutput: 1\\n  Constraints:\\n0 <= nums.length <= 300\\n-231 <= nums[i] <= 231 - 1\\n  Follow up: Could you implement an algorithm that runs in O(n) time and uses constant extra space?\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/first-missing-positive\", \"title\": \"First Missing Positive\"}", "{\"content\": \"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\nI can be placed before V (5) and X (10) to make 4 and 9. \\nX can be placed before L (50) and C (100) to make 40 and 90. \\nC can be placed before D (500) and M (1000) to make 400 and 900.\\nGiven an integer, convert it to a roman numeral.\\n  Example 1:\\nInput: num = 3\\nOutput: \\\"III\\\"\\nExample 2:\\nInput: num = 4\\nOutput: \\\"IV\\\"\\nExample 3:\\nInput: num = 9\\nOutput: \\\"IX\\\"\\nExample 4:\\nInput: num = 58\\nOutput: \\\"LVIII\\\"\\nExplanation: L = 50, V = 5, III = 3.\\nExample 5:\\nInput: num = 1994\\nOutput: \\\"MCMXCIV\\\"\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n  Constraints:\\n1 <= num <= 3999\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/integer-to-roman\", \"title\": \"Integer to Roman\"}", "{\"content\": \"A message containing letters from A-Z can be encoded into numbers using the following mapping:\\n'A' -> \\\"1\\\"\\n'B' -> \\\"2\\\"\\n...\\n'Z' -> \\\"26\\\"\\nTo decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple ways). For example, \\\"11106\\\" can be mapped into:\\n\\\"AAJF\\\" with the grouping (1 1 10 6)\\n\\\"KJF\\\" with the grouping (11 10 6)\\nNote that the grouping (1 11 06) is invalid because \\\"06\\\" cannot be mapped into 'F' since \\\"6\\\" is different from \\\"06\\\".\\nGiven a string s containing only digits, return the number of ways to decode it.\\nThe answer is guaranteed to fit in a 32-bit integer.\\n  Example 1:\\nInput: s = \\\"12\\\"\\nOutput: 2\\nExplanation: \\\"12\\\" could be decoded as \\\"AB\\\" (1 2) or \\\"L\\\" (12).\\nExample 2:\\nInput: s = \\\"226\\\"\\nOutput: 3\\nExplanation: \\\"226\\\" could be decoded as \\\"BZ\\\" (2 26), \\\"VF\\\" (22 6), or \\\"BBF\\\" (2 2 6).\\nExample 3:\\nInput: s = \\\"0\\\"\\nOutput: 0\\nExplanation: There is no character that is mapped to a number starting with 0.\\nThe only valid mappings with 0 are 'J' -> \\\"10\\\" and 'T' -> \\\"20\\\", neither of which start with 0.\\nHence, there are no valid ways to decode this since all digits need to be mapped.\\nExample 4:\\nInput: s = \\\"06\\\"\\nOutput: 0\\nExplanation: \\\"06\\\" cannot be mapped to \\\"F\\\" because of the leading zero (\\\"6\\\" is different from \\\"06\\\").\\n  Constraints:\\n1 <= s.length <= 100\\ns contains only digits and may contain leading zero(s).\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/decode-ways\", \"title\": \"Decode Ways\"}", "{\"content\": \"Given two integers n and k, return all possible combinations of k numbers out of 1 ... n.\\nYou may return the answer in any order.\\n  Example 1:\\nInput: n = 4, k = 2\\nOutput:\\n[\\n  [2,4],\\n  [3,4],\\n  [2,3],\\n  [1,2],\\n  [1,3],\\n  [1,4],\\n]\\nExample 2:\\nInput: n = 1, k = 1\\nOutput: [[1]]\\n  Constraints:\\n1 <= n <= 20\\n1 <= k <= n\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/combinations\", \"title\": \"Combinations\"}", "{\"content\": \"\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/add-two-numbers\", \"title\": \"Add Two Numbers\"}", "{\"content\": \"Given a linked list, return the node where the cycle begins. If there is no cycle, return null.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\\nNotice that you should not modify the linked list.\\n  Example 1:\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: tail connects to node index 1\\nExplanation: There is a cycle in the linked list, where tail connects to the second node.\\nExample 2:\\nInput: head = [1,2], pos = 0\\nOutput: tail connects to node index 0\\nExplanation: There is a cycle in the linked list, where tail connects to the first node.\\nExample 3:\\nInput: head = [1], pos = -1\\nOutput: no cycle\\nExplanation: There is no cycle in the linked list.\\n  Constraints:\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n  Follow up: Can you solve it using O(1) (i.e. constant) memory?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/linked-list-cycle-ii\", \"title\": \"Linked List Cycle II\"}", "{\"content\": \"Given an array of non-negative integers nums, you are initially positioned at the first index of the array.\\nEach element in the array represents your maximum jump length at that position.\\nYour goal is to reach the last index in the minimum number of jumps.\\nYou can assume that you can always reach the last index.\\n  Example 1:\\nInput: nums = [2,3,1,1,4]\\nOutput: 2\\nExplanation: The minimum number of jumps to reach the last index is 2. Jump 1 step from index 0 to 1, then 3 steps to the last index.\\nExample 2:\\nInput: nums = [2,3,0,1,4]\\nOutput: 2\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n0 <= nums[i] <= 105\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/jump-game-ii\", \"title\": \"Jump Game II\"}", "{\"content\": \"Reverse a linked list from position m to n. Do it in one-pass.\\nNote: 1 ≤ m ≤ n ≤ length of list.\\nExample:\\nInput: 1->2->3->4->5->NULL, m = 2, n = 4\\nOutput: 1->4->3->2->5->NULL\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/reverse-linked-list-ii\", \"title\": \"Reverse Linked List II\"}", "{\"content\": \"You are climbing a staircase. It takes n steps to reach the top.\\nEach time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?\\n  Example 1:\\nInput: n = 2\\nOutput: 2\\nExplanation: There are two ways to climb to the top.\\n1. 1 step + 1 step\\n2. 2 steps\\nExample 2:\\nInput: n = 3\\nOutput: 3\\nExplanation: There are three ways to climb to the top.\\n1. 1 step + 1 step + 1 step\\n2. 1 step + 2 steps\\n3. 2 steps + 1 step\\n  Constraints:\\n1 <= n <= 45\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/climbing-stairs\", \"title\": \"Climbing Stairs\"}", "{\"content\": \"Given a binary tree, return the zigzag level order traversal of its nodes' values. (ie, from left to right, then right to left for the next level and alternate between).\\nFor example:\\nGiven binary tree [3,9,20,null,null,15,7],\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\\nreturn its zigzag level order traversal as:\\n[\\n  [3],\\n  [20,9],\\n  [15,7]\\n]\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal\", \"title\": \"Binary Tree Zigzag Level Order Traversal\"}", "{\"content\": \"Given the roots of two binary trees p and q, write a function to check if they are the same or not.\\nTwo binary trees are considered the same if they are structurally identical, and the nodes have the same value.\\n  Example 1:\\nInput: p = [1,2,3], q = [1,2,3]\\nOutput: true\\nExample 2:\\nInput: p = [1,2], q = [1,null,2]\\nOutput: false\\nExample 3:\\nInput: p = [1,2,1], q = [1,1,2]\\nOutput: false\\n  Constraints:\\nThe number of nodes in both trees is in the range [0, 100].\\n-104 <= Node.val <= 104\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/same-tree\", \"title\": \"Same Tree\"}", "{\"content\": \"Given n points on a 2D plane, find the maximum number of points that lie on the same straight line.\\nExample 1:\\nInput: [[1,1],[2,2],[3,3]]\\nOutput: 3\\nExplanation:\\n^\\n|\\n|        o\\n|     o\\n|  o  \\n+------------->\\n0  1  2  3  4\\nExample 2:\\nInput: [[1,1],[3,2],[5,3],[4,1],[2,3],[1,4]]\\nOutput: 4\\nExplanation:\\n^\\n|\\n|  o\\n|     o        o\\n|        o\\n|  o        o\\n+------------------->\\n0  1  2  3  4  5  6\\nNOTE: input types have been changed on April 15, 2019. Please reset to default code definition to get new method signature.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/max-points-on-a-line\", \"title\": \"Max Points on a Line\"}", "{\"content\": \"Given an array of integers nums sorted in ascending order, find the starting and ending position of a given target value.\\nIf target is not found in the array, return [-1, -1].\\nFollow up: Could you write an algorithm with O(log n) runtime complexity?\\n  Example 1:\\nInput: nums = [5,7,7,8,8,10], target = 8\\nOutput: [3,4]\\nExample 2:\\nInput: nums = [5,7,7,8,8,10], target = 6\\nOutput: [-1,-1]\\nExample 3:\\nInput: nums = [], target = 0\\nOutput: [-1,-1]\\n  Constraints:\\n0 <= nums.length <= 105\\n-109 <= nums[i] <= 109\\nnums is a non-decreasing array.\\n-109 <= target <= 109\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array\", \"title\": \"Find First and Last Position of Element in Sorted Array\"}", "{\"content\": \"Given a non-negative integer numRows, generate the first numRows of Pascal's triangle.\\n\\nIn Pascal's triangle, each number is the sum of the two numbers directly above it.\\nExample:\\nInput: 5\\nOutput:\\n[\\n     [1],\\n    [1,1],\\n   [1,2,1],\\n  [1,3,3,1],\\n [1,4,6,4,1]\\n]\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/pascals-triangle\", \"title\": \"Pascal's Triangle\"}", "{\"content\": \"Given the head of a linked list and a value x, partition it such that all nodes less than x come before nodes greater than or equal to x.\\nYou should preserve the original relative order of the nodes in each of the two partitions.\\n  Example 1:\\nInput: head = [1,4,3,2,5,2], x = 3\\nOutput: [1,2,2,4,3,5]\\nExample 2:\\nInput: head = [2,1], x = 2\\nOutput: [1,2]\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 200].\\n-100 <= Node.val <= 100\\n-200 <= x <= 200\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/partition-list\", \"title\": \"Partition List\"}", "{\"content\": \"The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.\\nGiven an integer n, return the number of distinct solutions to the n-queens puzzle.\\n  Example 1:\\nInput: n = 4\\nOutput: 2\\nExplanation: There are two distinct solutions to the 4-queens puzzle as shown.\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n  Constraints:\\n1 <= n <= 9\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/n-queens-ii\", \"title\": \"N-Queens II\"}", "{\"content\": \"Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: \\n'.' Matches any single character.\\n'*' Matches zero or more of the preceding element.\\nThe matching should cover the entire input string (not partial).\\n  Example 1:\\nInput: s = \\\"aa\\\", p = \\\"a\\\"\\nOutput: false\\nExplanation: \\\"a\\\" does not match the entire string \\\"aa\\\".\\nExample 2:\\nInput: s = \\\"aa\\\", p = \\\"a*\\\"\\nOutput: true\\nExplanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes \\\"aa\\\".\\nExample 3:\\nInput: s = \\\"ab\\\", p = \\\".*\\\"\\nOutput: true\\nExplanation: \\\".*\\\" means \\\"zero or more (*) of any character (.)\\\".\\nExample 4:\\nInput: s = \\\"aab\\\", p = \\\"c*a*b\\\"\\nOutput: true\\nExplanation: c can be repeated 0 times, a can be repeated 1 time. Therefore, it matches \\\"aab\\\".\\nExample 5:\\nInput: s = \\\"mississippi\\\", p = \\\"mis*is*p*.\\\"\\nOutput: false\\n  Constraints:\\n0 <= s.length <= 20\\n0 <= p.length <= 30\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '.', and '*'.\\nIt is guaranteed for each appearance of the character '*', there will be a previous valid character to match.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/regular-expression-matching\", \"title\": \"Regular Expression Matching\"}", "{\"content\": \"Given the head of a linked list, return the list after sorting it in ascending order.\\nFollow up: Can you sort the linked list in O(n logn) time and O(1) memory (i.e. constant space)?\\n  Example 1:\\nInput: head = [4,2,1,3]\\nOutput: [1,2,3,4]\\nExample 2:\\nInput: head = [-1,5,3,4,0]\\nOutput: [-1,0,3,4,5]\\nExample 3:\\nInput: head = []\\nOutput: []\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 5 * 104].\\n-105 <= Node.val <= 105\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/sort-list\", \"title\": \"Sort List\"}", "{\"content\": \"Implement pow(x, n), which calculates x raised to the power n (i.e. xn).\\n  Example 1:\\nInput: x = 2.00000, n = 10\\nOutput: 1024.00000\\nExample 2:\\nInput: x = 2.10000, n = 3\\nOutput: 9.26100\\nExample 3:\\nInput: x = 2.00000, n = -2\\nOutput: 0.25000\\nExplanation: 2-2 = 1/22 = 1/4 = 0.25\\n  Constraints:\\n-100.0 < x < 100.0\\n-231 <= n <= 231-1\\n-104 <= xn <= 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/powx-n\", \"title\": \"Pow(x, n)\"}", "{\"content\": \"A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.\\nThe path sum of a path is the sum of the node's values in the path.\\nGiven the root of a binary tree, return the maximum path sum of any path.\\n  Example 1:\\nInput: root = [1,2,3]\\nOutput: 6\\nExplanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.\\nExample 2:\\nInput: root = [-10,9,20,null,null,15,7]\\nOutput: 42\\nExplanation: The optimal path is 15 -> 20 -> 7 with a path sum of 15 + 20 + 7 = 42.\\n  Constraints:\\nThe number of nodes in the tree is in the range [1, 3 * 104].\\n-1000 <= Node.val <= 1000\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/binary-tree-maximum-path-sum\", \"title\": \"Binary Tree Maximum Path Sum\"}", "{\"content\": \"Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.\\n  Example 1:\\nInput: nums = [-2,1,-3,4,-1,2,1,-5,4]\\nOutput: 6\\nExplanation: [4,-1,2,1] has the largest sum = 6.\\nExample 2:\\nInput: nums = [1]\\nOutput: 1\\nExample 3:\\nInput: nums = [0]\\nOutput: 0\\nExample 4:\\nInput: nums = [-1]\\nOutput: -1\\nExample 5:\\nInput: nums = [-100000]\\nOutput: -100000\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n-105 <= nums[i] <= 105\\n  Follow up: If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/maximum-subarray\", \"title\": \"Maximum Subarray\"}", "{\"content\": \"You are given an integer array nums sorted in ascending order (not necessarily distinct values), and an integer target.\\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,4,4,5,6,6,7] might become [4,5,6,6,7,0,1,2,4,4]).\\nIf target is found in the array return its index, otherwise, return -1.\\n  Example 1:\\nInput: nums = [2,5,6,0,0,1,2], target = 0\\nOutput: true\\nExample 2:\\nInput: nums = [2,5,6,0,0,1,2], target = 3\\nOutput: false\\n  Constraints:\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104\\n  Follow up: This problem is the same as Search in Rotated Sorted Array, where nums may contain duplicates. Would this affect the run-time complexity? How and why?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/search-in-rotated-sorted-array-ii\", \"title\": \"Search in Rotated Sorted Array II\"}", "{\"content\": \"We can scramble a string s to get a string t using the following algorithm:\\nIf the length of the string is 1, stop.\\nIf the length of the string is > 1, do the following:\\nSplit the string into two non-empty substrings at a random index, i.e., if the string is s, divide it to x and y where s = x + y.\\nRandomly decide to swap the two substrings or to keep them in the same order. i.e., after this step, s may become s = x + y or s = y + x.\\nApply step 1 recursively on each of the two substrings x and y.\\nGiven two strings s1 and s2 of the same length, return true if s2 is a scrambled string of s1, otherwise, return false.\\n  Example 1:\\nInput: s1 = \\\"great\\\", s2 = \\\"rgeat\\\"\\nOutput: true\\nExplanation: One possible scenario applied on s1 is:\\n\\\"great\\\" --> \\\"gr/eat\\\" // divide at random index.\\n\\\"gr/eat\\\" --> \\\"gr/eat\\\" // random decision is not to swap the two substrings and keep them in order.\\n\\\"gr/eat\\\" --> \\\"g/r / e/at\\\" // apply the same algorithm recursively on both substrings. divide at ranom index each of them.\\n\\\"g/r / e/at\\\" --> \\\"r/g / e/at\\\" // random decision was to swap the first substring and to keep the second substring in the same order.\\n\\\"r/g / e/at\\\" --> \\\"r/g / e/ a/t\\\" // again apply the algorithm recursively, divide \\\"at\\\" to \\\"a/t\\\".\\n\\\"r/g / e/ a/t\\\" --> \\\"r/g / e/ a/t\\\" // random decision is to keep both substrings in the same order.\\nThe algorithm stops now and the result string is \\\"rgeat\\\" which is s2.\\nAs there is one possible scenario that led s1 to be scrambled to s2, we return true.\\nExample 2:\\nInput: s1 = \\\"abcde\\\", s2 = \\\"caebd\\\"\\nOutput: false\\nExample 3:\\nInput: s1 = \\\"a\\\", s2 = \\\"a\\\"\\nOutput: true\\n  Constraints:\\ns1.length == s2.length\\n1 <= s1.length <= 30\\ns1 and s2 consist of lower-case English letters.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/scramble-string\", \"title\": \"Scramble String\"}", "{\"content\": \"The count-and-say sequence is a sequence of digit strings defined by the recursive formula:\\ncountAndSay(1) = \\\"1\\\"\\ncountAndSay(n) is the way you would \\\"say\\\" the digit string from countAndSay(n-1), which is then converted into a different digit string.\\nTo determine how you \\\"say\\\" a digit string, split it into the minimal number of groups so that each group is a contiguous section all of the same character. Then for each group, say the number of characters, then say the character. To convert the saying into a digit string, replace the counts with a number and concatenate every saying.\\nFor example, the saying and conversion for digit string \\\"3322251\\\":\\nGiven a positive integer n, return the nth term of the count-and-say sequence.\\n  Example 1:\\nInput: n = 1\\nOutput: \\\"1\\\"\\nExplanation: This is the base case.\\nExample 2:\\nInput: n = 4\\nOutput: \\\"1211\\\"\\nExplanation:\\ncountAndSay(1) = \\\"1\\\"\\ncountAndSay(2) = say \\\"1\\\" = one 1 = \\\"11\\\"\\ncountAndSay(3) = say \\\"11\\\" = two 1's = \\\"21\\\"\\ncountAndSay(4) = say \\\"21\\\" = one 2 + one 1 = \\\"12\\\" + \\\"11\\\" = \\\"1211\\\"\\n  Constraints:\\n1 <= n <= 30\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/count-and-say\", \"title\": \"Count and Say\"}", "{\"content\": \"Given two version numbers, version1 and version2, compare them.\\nVersion numbers consist of one or more revisions joined by a dot '.'. Each revision consists of digits and may contain leading zeros. Every revision contains at least one character. Revisions are 0-indexed from left to right, with the leftmost revision being revision 0, the next revision being revision 1, and so on. For example 2.5.33 and 0.1 are valid version numbers.\\nTo compare version numbers, compare their revisions in left-to-right order. Revisions are compared using their integer value ignoring any leading zeros. This means that revisions 1 and 001 are considered equal. If a version number does not specify a revision at an index, then treat the revision as 0. For example, version 1.0 is less than version 1.1 because their revision 0s are the same, but their revision 1s are 0 and 1 respectively, and 0 < 1.\\nReturn the following:\\nIf version1 < version2, return -1.\\nIf version1 > version2, return 1.\\nOtherwise, return 0.\\n  Example 1:\\nInput: version1 = \\\"1.01\\\", version2 = \\\"1.001\\\"\\nOutput: 0\\nExplanation: Ignoring leading zeroes, both \\\"01\\\" and \\\"001\\\" represent the same integer \\\"1\\\".\\nExample 2:\\nInput: version1 = \\\"1.0\\\", version2 = \\\"1.0.0\\\"\\nOutput: 0\\nExplanation: version1 does not specify revision 2, which means it is treated as \\\"0\\\".\\nExample 3:\\nInput: version1 = \\\"0.1\\\", version2 = \\\"1.1\\\"\\nOutput: -1\\nExplanation: version1's revision 0 is \\\"0\\\", while version2's revision 0 is \\\"1\\\". 0 < 1, so version1 < version2.\\nExample 4:\\nInput: version1 = \\\"1.0.1\\\", version2 = \\\"1\\\"\\nOutput: 1\\nExample 5:\\nInput: version1 = \\\"7.5.2.4\\\", version2 = \\\"7.5.3\\\"\\nOutput: -1\\n  Constraints:\\n1 <= version1.length, version2.length <= 500\\nversion1 and version2 only contain digits and '.'.\\nversion1 and version2 are valid version numbers.\\nAll the given revisions in version1 and version2 can be stored in a 32-bit integer.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/compare-version-numbers\", \"title\": \"Compare Version Numbers\"}", "{\"content\": \"\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/sum-root-to-leaf-numbers\", \"title\": \"Sum Root to Leaf Numbers\"}", "{\"content\": \"Given a string containing just the characters '(' and ')', find the length of the longest valid (well-formed) parentheses substring.\\n  Example 1:\\nInput: s = \\\"(()\\\"\\nOutput: 2\\nExplanation: The longest valid parentheses substring is \\\"()\\\".\\nExample 2:\\nInput: s = \\\")()())\\\"\\nOutput: 4\\nExplanation: The longest valid parentheses substring is \\\"()()\\\".\\nExample 3:\\nInput: s = \\\"\\\"\\nOutput: 0\\n  Constraints:\\n0 <= s.length <= 3 * 104\\ns[i] is '(', or ')'.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/longest-valid-parentheses\", \"title\": \"Longest Valid Parentheses\"}", "{\"content\": \"Given the head of a linked list, rotate the list to the right by k places.\\n  Example 1:\\nInput: head = [1,2,3,4,5], k = 2\\nOutput: [4,5,1,2,3]\\nExample 2:\\nInput: head = [0,1,2], k = 4\\nOutput: [2,0,1]\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 500].\\n-100 <= Node.val <= 100\\n0 <= k <= 2 * 109\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/rotate-list\", \"title\": \"Rotate List\"}", "{\"content\": \"Given an integer n, return the number of structurally unique BST's (binary search trees) which has exactly n nodes of unique values from 1 to n.\\n  Example 1:\\nInput: n = 3\\nOutput: 5\\nExample 2:\\nInput: n = 1\\nOutput: 1\\n  Constraints:\\n1 <= n <= 19\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/unique-binary-search-trees\", \"title\": \"Unique Binary Search Trees\"}", "{\"content\": \"Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.\\nYou may assume that each input would have exactly one solution, and you may not use the same element twice.\\nYou can return the answer in any order.\\n  Example 1:\\nInput: nums = [2,7,11,15], target = 9\\nOutput: [0,1]\\nOutput: Because nums[0] + nums[1] == 9, we return [0, 1].\\nExample 2:\\nInput: nums = [3,2,4], target = 6\\nOutput: [1,2]\\nExample 3:\\nInput: nums = [3,3], target = 6\\nOutput: [0,1]\\n  Constraints:\\n2 <= nums.length <= 103\\n-109 <= nums[i] <= 109\\n-109 <= target <= 109\\nOnly one valid answer exists.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/two-sum\", \"title\": \"Two Sum\"}", "{\"content\": \"Given an array where elements are sorted in ascending order, convert it to a height balanced BST.\\nFor this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.\\nExample:\\nGiven the sorted array: [-10,-3,0,5,9],\\n\\nOne possible answer is: [0,-3,9,-10,null,5], which represents the following height balanced BST:\\n\\n      0\\n     / \\\\\\n   -3   9\\n   /   /\\n -10  5\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree\", \"title\": \"Convert Sorted Array to Binary Search Tree\"}", "{\"content\": \"Given a non-negative integer x, compute and return the square root of x.\\nSince the return type is an integer, the decimal digits are truncated, and only the integer part of the result is returned.\\n  Example 1:\\nInput: x = 4\\nOutput: 2\\nExample 2:\\nInput: x = 8\\nOutput: 2\\nExplanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.\\n  Constraints:\\n0 <= x <= 231 - 1\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/sqrtx\", \"title\": \"Sqrt(x)\"}", "{\"content\": \"Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where each path's sum equals targetSum.\\nA leaf is a node with no children.\\n  Example 1:\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22\\nOutput: [[5,4,11,2],[5,8,4,5]]\\nExample 2:\\nInput: root = [1,2,3], targetSum = 5\\nOutput: []\\nExample 3:\\nInput: root = [1,2], targetSum = 0\\nOutput: []\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/path-sum-ii\", \"title\": \"Path Sum II\"}", "{\"content\": \"Write a function to find the longest common prefix string amongst an array of strings.\\nIf there is no common prefix, return an empty string \\\"\\\".\\n  Example 1:\\nInput: strs = [\\\"flower\\\",\\\"flow\\\",\\\"flight\\\"]\\nOutput: \\\"fl\\\"\\nExample 2:\\nInput: strs = [\\\"dog\\\",\\\"racecar\\\",\\\"car\\\"]\\nOutput: \\\"\\\"\\nExplanation: There is no common prefix among the input strings.\\n  Constraints:\\n0 <= strs.length <= 200\\n0 <= strs[i].length <= 200\\nstrs[i] consists of only lower-case English letters.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/longest-common-prefix\", \"title\": \"Longest Common Prefix\"}", "{\"content\": \"Given a reference of a node in a connected undirected graph.\\nReturn a deep copy (clone) of the graph.\\nEach node in the graph contains a val (int) and a list (List[Node]) of its neighbors.\\nclass Node {\\n    public int val;\\n    public List<Node> neighbors;\\n}\\n  Test case format:\\nFor simplicity sake, each node's value is the same as the node's index (1-indexed). For example, the first node with val = 1, the second node with val = 2, and so on. The graph is represented in the test case using an adjacency list.\\nAdjacency list is a collection of unordered lists used to represent a finite graph. Each list describes the set of neighbors of a node in the graph.\\nThe given node will always be the first node with val = 1. You must return the copy of the given node as a reference to the cloned graph.\\n  Example 1:\\nInput: adjList = [[2,4],[1,3],[2,4],[1,3]]\\nOutput: [[2,4],[1,3],[2,4],[1,3]]\\nExplanation: There are 4 nodes in the graph.\\n1st node (val = 1)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n2nd node (val = 2)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\n3rd node (val = 3)'s neighbors are 2nd node (val = 2) and 4th node (val = 4).\\n4th node (val = 4)'s neighbors are 1st node (val = 1) and 3rd node (val = 3).\\nExample 2:\\nInput: adjList = [[]]\\nOutput: [[]]\\nExplanation: Note that the input contains one empty list. The graph consists of only one node with val = 1 and it does not have any neighbors.\\nExample 3:\\nInput: adjList = []\\nOutput: []\\nExplanation: This an empty graph, it does not have any nodes.\\nExample 4:\\nInput: adjList = [[2],[1]]\\nOutput: [[2],[1]]\\n  Constraints:\\n1 <= Node.val <= 100\\nNode.val is unique for each node.\\nNumber of Nodes will not exceed 100.\\nThere is no repeated edges and no self-loops in the graph.\\nThe Graph is connected and all nodes can be visited starting from the given node.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/clone-graph\", \"title\": \"Clone Graph\"}", "{\"content\": \"Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.\\n  Example 1:\\nInput: height = [0,1,0,2,1,0,1,3,2,1,2,1]\\nOutput: 6\\nExplanation: The above elevation map (black section) is represented by array [0,1,0,2,1,0,1,3,2,1,2,1]. In this case, 6 units of rain water (blue section) are being trapped.\\nExample 2:\\nInput: height = [4,2,0,3,2,5]\\nOutput: 9\\n  Constraints:\\nn == height.length\\n0 <= n <= 3 * 104\\n0 <= height[i] <= 105\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/trapping-rain-water\", \"title\": \"Trapping Rain Water\"}", "{\"content\": \"Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.\\nYou have the following three operations permitted on a word:\\nInsert a character\\nDelete a character\\nReplace a character\\n  Example 1:\\nInput: word1 = \\\"horse\\\", word2 = \\\"ros\\\"\\nOutput: 3\\nExplanation: \\nhorse -> rorse (replace 'h' with 'r')\\nrorse -> rose (remove 'r')\\nrose -> ros (remove 'e')\\nExample 2:\\nInput: word1 = \\\"intention\\\", word2 = \\\"execution\\\"\\nOutput: 5\\nExplanation: \\nintention -> inention (remove 't')\\ninention -> enention (replace 'i' with 'e')\\nenention -> exention (replace 'n' with 'x')\\nexention -> exection (replace 'n' with 'c')\\nexection -> execution (insert 'u')\\n  Constraints:\\n0 <= word1.length, word2.length <= 500\\nword1 and word2 consist of lowercase English letters.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/edit-distance\", \"title\": \"Edit Distance\"}", "{\"content\": \"Given a string s containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in any order.\\nA valid IP address consists of exactly four integers, each integer is between 0 and 255, separated by single dots and cannot have leading zeros. For example, \\\"0.1.2.201\\\" and \\\"192.168.1.1\\\" are valid IP addresses and \\\"0.011.255.245\\\", \\\"192.168.1.312\\\" and \\\"192.168@1.1\\\" are invalid IP addresses. \\n  Example 1:\\nInput: s = \\\"25525511135\\\"\\nOutput: [\\\"255.255.11.135\\\",\\\"255.255.111.35\\\"]\\nExample 2:\\nInput: s = \\\"0000\\\"\\nOutput: [\\\"0.0.0.0\\\"]\\nExample 3:\\nInput: s = \\\"1111\\\"\\nOutput: [\\\"1.1.1.1\\\"]\\nExample 4:\\nInput: s = \\\"010010\\\"\\nOutput: [\\\"0.10.0.10\\\",\\\"0.100.1.0\\\"]\\nExample 5:\\nInput: s = \\\"101023\\\"\\nOutput: [\\\"1.0.10.23\\\",\\\"1.0.102.3\\\",\\\"10.1.0.23\\\",\\\"10.10.2.3\\\",\\\"101.0.2.3\\\"]\\n  Constraints:\\n0 <= s.length <= 3000\\ns consists of digits only.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/restore-ip-addresses\", \"title\": \"Restore IP Addresses\"}", "{\"content\": \"You are given a perfect binary tree where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:\\nstruct Node {\\n  int val;\\n  Node *left;\\n  Node *right;\\n  Node *next;\\n}\\nPopulate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.\\nInitially, all next pointers are set to NULL.\\n  Follow up:\\nYou may only use constant extra space.\\nRecursive approach is fine, you may assume implicit stack space does not count as extra space for this problem.\\n  Example 1:\\nInput: root = [1,2,3,4,5,6,7]\\nOutput: [1,#,2,3,#,4,5,6,7,#]\\nExplanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with '#' signifying the end of each level.\\n  Constraints:\\nThe number of nodes in the given tree is less than 4096.\\n-1000 <= node.val <= 1000\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/populating-next-right-pointers-in-each-node\", \"title\": \"Populating Next Right Pointers in Each Node\"}", "{\"content\": \"Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.\\nFollow up: Could you implement a solution with a linear runtime complexity and without using extra memory?\\n  Example 1:\\nInput: nums = [2,2,1]\\nOutput: 1\\nExample 2:\\nInput: nums = [4,1,2,1,2]\\nOutput: 4\\nExample 3:\\nInput: nums = [1]\\nOutput: 1\\n  Constraints:\\n1 <= nums.length <= 3 * 104\\n-3 * 104 <= nums[i] <= 3 * 104\\nEach element in the array appears twice except for one element which appears only once.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/single-number\", \"title\": \"Single Number\"}", "{\"content\": \"Given an input string s, reverse the order of the words.\\nA word is defined as a sequence of non-space characters. The words in s will be separated by at least one space.\\nReturn a string of the words in reverse order concatenated by a single space.\\nNote that s may contain leading or trailing spaces or multiple spaces between two words. The returned string should only have a single space separating the words. Do not include any extra spaces.\\n  Example 1:\\nInput: s = \\\"the sky is blue\\\"\\nOutput: \\\"blue is sky the\\\"\\nExample 2:\\nInput: s = \\\"  hello world  \\\"\\nOutput: \\\"world hello\\\"\\nExplanation: Your reversed string should not contain leading or trailing spaces.\\nExample 3:\\nInput: s = \\\"a good   example\\\"\\nOutput: \\\"example good a\\\"\\nExplanation: You need to reduce multiple spaces between two words to a single space in the reversed string.\\nExample 4:\\nInput: s = \\\"  Bob    Loves  Alice   \\\"\\nOutput: \\\"Alice Loves Bob\\\"\\nExample 5:\\nInput: s = \\\"Alice does not even like bob\\\"\\nOutput: \\\"bob like even not does Alice\\\"\\n  Constraints:\\n1 <= s.length <= 104\\ns contains English letters (upper-case and lower-case), digits, and spaces ' '.\\nThere is at least one word in s.\\n  Follow up:\\nCould you solve it in-place with O(1) extra space?\\n \", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/reverse-words-in-a-string\", \"title\": \"Reverse Words in a String\"}", "{\"content\": \"Given an integer array nums of unique elements, return all possible subsets (the power set).\\nThe solution set must not contain duplicate subsets. Return the solution in any order.\\n  Example 1:\\nInput: nums = [1,2,3]\\nOutput: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]\\nExample 2:\\nInput: nums = [0]\\nOutput: [[],[0]]\\n  Constraints:\\n1 <= nums.length <= 10\\n-10 <= nums[i] <= 10\\nAll the numbers of nums are unique.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/subsets\", \"title\": \"Subsets\"}", "{\"content\": \"Given n pairs of parentheses, write a function to generate all combinations of well-formed parentheses.\\n  Example 1:\\nInput: n = 3\\nOutput: [\\\"((()))\\\",\\\"(()())\\\",\\\"(())()\\\",\\\"()(())\\\",\\\"()()()\\\"]\\nExample 2:\\nInput: n = 1\\nOutput: [\\\"()\\\"]\\n  Constraints:\\n1 <= n <= 8\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/generate-parentheses\", \"title\": \"Generate Parentheses\"}", "{\"content\": \"Write an efficient algorithm that searches for a value in an m x n matrix. This matrix has the following properties:\\nIntegers in each row are sorted from left to right.\\nThe first integer of each row is greater than the last integer of the previous row.\\n  Example 1:\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 3\\nOutput: true\\nExample 2:\\nInput: matrix = [[1,3,5,7],[10,11,16,20],[23,30,34,60]], target = 13\\nOutput: false\\n  Constraints:\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 100\\n-104 <= matrix[i][j], target <= 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/search-a-2d-matrix\", \"title\": \"Search a 2D Matrix\"}", "{\"content\": \"Given an array of distinct integers candidates and a target integer target, return a list of all unique combinations of candidates where the chosen numbers sum to target. You may return the combinations in any order.\\nThe same number may be chosen from candidates an unlimited number of times. Two combinations are unique if the frequency of at least one of the chosen numbers is different.\\nIt is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.\\n  Example 1:\\nInput: candidates = [2,3,6,7], target = 7\\nOutput: [[2,2,3],[7]]\\nExplanation:\\n2 and 3 are candidates, and 2 + 2 + 3 = 7. Note that 2 can be used multiple times.\\n7 is a candidate, and 7 = 7.\\nThese are the only two combinations.\\nExample 2:\\nInput: candidates = [2,3,5], target = 8\\nOutput: [[2,2,2,2],[2,3,3],[3,5]]\\nExample 3:\\nInput: candidates = [2], target = 1\\nOutput: []\\nExample 4:\\nInput: candidates = [1], target = 1\\nOutput: [[1]]\\nExample 5:\\nInput: candidates = [1], target = 2\\nOutput: [[1,1]]\\n  Constraints:\\n1 <= candidates.length <= 30\\n1 <= candidates[i] <= 200\\nAll elements of candidates are distinct.\\n1 <= target <= 500\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/combination-sum\", \"title\": \"Combination Sum\"}", "{\"content\": \"Given a 2D board containing 'X' and 'O' (the letter O), capture all regions surrounded by 'X'.\\nA region is captured by flipping all 'O's into 'X's in that surrounded region.\\nExample:\\nX X X X\\nX O O X\\nX X O X\\nX O X X\\nAfter running your function, the board should be:\\nX X X X\\nX X X X\\nX X X X\\nX O X X\\nExplanation:\\nSurrounded regions shouldn’t be on the border, which means that any 'O' on the border of the board are not flipped to 'X'. Any 'O' that is not on the border and it is not connected to an 'O' on the border will be flipped to 'X'. Two cells are connected if they are adjacent cells connected horizontally or vertically.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/surrounded-regions\", \"title\": \"Surrounded Regions\"}", "{\"content\": \"You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.\\nMerge all the linked-lists into one sorted linked-list and return it.\\n  Example 1:\\nInput: lists = [[1,4,5],[1,3,4],[2,6]]\\nOutput: [1,1,2,3,4,4,5,6]\\nExplanation: The linked-lists are:\\n[\\n  1->4->5,\\n  1->3->4,\\n  2->6\\n]\\nmerging them into one sorted list:\\n1->1->2->3->4->4->5->6\\nExample 2:\\nInput: lists = []\\nOutput: []\\nExample 3:\\nInput: lists = [[]]\\nOutput: []\\n  Constraints:\\nk == lists.length\\n0 <= k <= 10^4\\n0 <= lists[i].length <= 500\\n-10^4 <= lists[i][j] <= 10^4\\nlists[i] is sorted in ascending order.\\nThe sum of lists[i].length won't exceed 10^4.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/merge-k-sorted-lists\", \"title\": \"Merge k Sorted Lists\"}", "{\"content\": \"Given an array of intervals where intervals[i] = [starti, endi], merge all overlapping intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.\\n  Example 1:\\nInput: intervals = [[1,3],[2,6],[8,10],[15,18]]\\nOutput: [[1,6],[8,10],[15,18]]\\nExplanation: Since intervals [1,3] and [2,6] overlaps, merge them into [1,6].\\nExample 2:\\nInput: intervals = [[1,4],[4,5]]\\nOutput: [[1,5]]\\nExplanation: Intervals [1,4] and [4,5] are considered overlapping.\\n  Constraints:\\n1 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= starti <= endi <= 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/merge-intervals\", \"title\": \"Merge Intervals\"}", "{\"content\": \"Given the head of a sorted linked list, delete all duplicates such that each element appears only once. Return the linked list sorted as well.\\n  Example 1:\\nInput: head = [1,1,2]\\nOutput: [1,2]\\nExample 2:\\nInput: head = [1,1,2,3,3]\\nOutput: [1,2,3]\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/remove-duplicates-from-sorted-list\", \"title\": \"Remove Duplicates from Sorted List\"}", "{\"content\": \"Given an m x n matrix, return all elements of the matrix in spiral order.\\n  Example 1:\\nInput: matrix = [[1,2,3],[4,5,6],[7,8,9]]\\nOutput: [1,2,3,6,9,8,7,4,5]\\nExample 2:\\nInput: matrix = [[1,2,3,4],[5,6,7,8],[9,10,11,12]]\\nOutput: [1,2,3,4,8,12,11,10,9,5,6,7]\\n  Constraints:\\nm == matrix.length\\nn == matrix[i].length\\n1 <= m, n <= 10\\n-100 <= matrix[i][j] <= 100\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/spiral-matrix\", \"title\": \"Spiral Matrix\"}", "{\"content\": \"Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:\\nEach row must contain the digits 1-9 without repetition.\\nEach column must contain the digits 1-9 without repetition.\\nEach of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.\\nNote:\\nA Sudoku board (partially filled) could be valid but is not necessarily solvable.\\nOnly the filled cells need to be validated according to the mentioned rules.\\n  Example 1:\\nInput: board = \\n[[\\\"5\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"]\\n,[\\\"6\\\",\\\".\\\",\\\".\\\",\\\"1\\\",\\\"9\\\",\\\"5\\\",\\\".\\\",\\\".\\\",\\\".\\\"]\\n,[\\\".\\\",\\\"9\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\"]\\n,[\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"3\\\"]\\n,[\\\"4\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"1\\\"]\\n,[\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\"]\\n,[\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\"8\\\",\\\".\\\"]\\n,[\\\".\\\",\\\".\\\",\\\".\\\",\\\"4\\\",\\\"1\\\",\\\"9\\\",\\\".\\\",\\\".\\\",\\\"5\\\"]\\n,[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\"9\\\"]]\\nOutput: true\\nExample 2:\\nInput: board = \\n[[\\\"8\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\"]\\n,[\\\"6\\\",\\\".\\\",\\\".\\\",\\\"1\\\",\\\"9\\\",\\\"5\\\",\\\".\\\",\\\".\\\",\\\".\\\"]\\n,[\\\".\\\",\\\"9\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\"]\\n,[\\\"8\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"3\\\"]\\n,[\\\"4\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\"3\\\",\\\".\\\",\\\".\\\",\\\"1\\\"]\\n,[\\\"7\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"6\\\"]\\n,[\\\".\\\",\\\"6\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"2\\\",\\\"8\\\",\\\".\\\"]\\n,[\\\".\\\",\\\".\\\",\\\".\\\",\\\"4\\\",\\\"1\\\",\\\"9\\\",\\\".\\\",\\\".\\\",\\\"5\\\"]\\n,[\\\".\\\",\\\".\\\",\\\".\\\",\\\".\\\",\\\"8\\\",\\\".\\\",\\\".\\\",\\\"7\\\",\\\"9\\\"]]\\nOutput: false\\nExplanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.\\n  Constraints:\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or '.'.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/valid-sudoku\", \"title\": \"Valid Sudoku\"}", "{\"content\": \"Given n non-negative integers a1, a2, ..., an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of the line i is at (i, ai) and (i, 0). Find two lines, which, together with the x-axis forms a container, such that the container contains the most water.\\nNotice that you may not slant the container.\\n  Example 1:\\nInput: height = [1,8,6,2,5,4,8,3,7]\\nOutput: 49\\nExplanation: The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\\nExample 2:\\nInput: height = [1,1]\\nOutput: 1\\nExample 3:\\nInput: height = [4,3,2,1,4]\\nOutput: 16\\nExample 4:\\nInput: height = [1,2,1]\\nOutput: 2\\n  Constraints:\\nn == height.length\\n2 <= n <= 3 * 104\\n0 <= height[i] <= 3 * 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/container-with-most-water\", \"title\": \"Container With Most Water\"}", "{\"content\": \"Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.\\nSymbol       Value\\nI             1\\nV             5\\nX             10\\nL             50\\nC             100\\nD             500\\nM             1000\\nFor example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.\\nRoman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:\\nI can be placed before V (5) and X (10) to make 4 and 9. \\nX can be placed before L (50) and C (100) to make 40 and 90. \\nC can be placed before D (500) and M (1000) to make 400 and 900.\\nGiven a roman numeral, convert it to an integer.\\n  Example 1:\\nInput: s = \\\"III\\\"\\nOutput: 3\\nExample 2:\\nInput: s = \\\"IV\\\"\\nOutput: 4\\nExample 3:\\nInput: s = \\\"IX\\\"\\nOutput: 9\\nExample 4:\\nInput: s = \\\"LVIII\\\"\\nOutput: 58\\nExplanation: L = 50, V= 5, III = 3.\\nExample 5:\\nInput: s = \\\"MCMXCIV\\\"\\nOutput: 1994\\nExplanation: M = 1000, CM = 900, XC = 90 and IV = 4.\\n  Constraints:\\n1 <= s.length <= 15\\ns contains only the characters ('I', 'V', 'X', 'L', 'C', 'D', 'M').\\nIt is guaranteed that s is a valid roman numeral in the range [1, 3999].\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/roman-to-integer\", \"title\": \"Roman to Integer\"}", "{\"content\": \"A peak element is an element that is strictly greater than its neighbors.\\nGiven an integer array nums, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.\\nYou may imagine that nums[-1] = nums[n] = -∞.\\n  Example 1:\\nInput: nums = [1,2,3,1]\\nOutput: 2\\nExplanation: 3 is a peak element and your function should return the index number 2.\\nExample 2:\\nInput: nums = [1,2,1,3,5,6,4]\\nOutput: 5\\nExplanation: Your function can return either index number 1 where the peak element is 2, or index number 5 where the peak element is 6.\\n  Constraints:\\n1 <= nums.length <= 1000\\n-231 <= nums[i] <= 231 - 1\\nnums[i] != nums[i + 1] for all valid i.\\n  Follow up: Could you implement a solution with logarithmic complexity?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/find-peak-element\", \"title\": \"Find Peak Element\"}", "{\"content\": \"You are given the root of a binary search tree (BST), where exactly two nodes of the tree were swapped by mistake. Recover the tree without changing its structure.\\nFollow up: A solution using O(n) space is pretty straight forward. Could you devise a constant space solution?\\n  Example 1:\\nInput: root = [1,3,null,null,2]\\nOutput: [3,1,null,null,2]\\nExplanation: 3 cannot be a left child of 1 because 3 > 1. Swapping 1 and 3 makes the BST valid.\\nExample 2:\\nInput: root = [3,1,4,null,null,2]\\nOutput: [2,1,4,null,null,3]\\nExplanation: 2 cannot be in the right subtree of 3 because 2 < 3. Swapping 2 and 3 makes the BST valid.\\n  Constraints:\\nThe number of nodes in the tree is in the range [2, 1000].\\n-231 <= Node.val <= 231 - 1\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/recover-binary-search-tree\", \"title\": \"Recover Binary Search Tree\"}", "{\"content\": \"Given the root of a binary tree, determine if it is a valid binary search tree (BST).\\nA valid BST is defined as follows:\\nThe left subtree of a node contains only nodes with keys less than the node's key.\\nThe right subtree of a node contains only nodes with keys greater than the node's key.\\nBoth the left and right subtrees must also be binary search trees.\\n  Example 1:\\nInput: root = [2,1,3]\\nOutput: true\\nExample 2:\\nInput: root = [5,1,4,null,null,3,6]\\nOutput: false\\nExplanation: The root node's value is 5 but its right child's value is 4.\\n  Constraints:\\nThe number of nodes in the tree is in the range [1, 104].\\n-231 <= Node.val <= 231 - 1\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/validate-binary-search-tree\", \"title\": \"Validate Binary Search Tree\"}", "{\"content\": \"Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).\\nYou may assume that the intervals were initially sorted according to their start times.\\n  Example 1:\\nInput: intervals = [[1,3],[6,9]], newInterval = [2,5]\\nOutput: [[1,5],[6,9]]\\nExample 2:\\nInput: intervals = [[1,2],[3,5],[6,7],[8,10],[12,16]], newInterval = [4,8]\\nOutput: [[1,2],[3,10],[12,16]]\\nExplanation: Because the new interval [4,8] overlaps with [3,5],[6,7],[8,10].\\nExample 3:\\nInput: intervals = [], newInterval = [5,7]\\nOutput: [[5,7]]\\nExample 4:\\nInput: intervals = [[1,5]], newInterval = [2,3]\\nOutput: [[1,5]]\\nExample 5:\\nInput: intervals = [[1,5]], newInterval = [2,7]\\nOutput: [[1,7]]\\n  Constraints:\\n0 <= intervals.length <= 104\\nintervals[i].length == 2\\n0 <= intervals[i][0] <= intervals[i][1] <= 105\\nintervals is sorted by intervals[i][0] in ascending order.\\nnewInterval.length == 2\\n0 <= newInterval[0] <= newInterval[1] <= 105\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/insert-interval\", \"title\": \"Insert Interval\"}", "{\"content\": \"Given the head of a sorted linked list, delete all nodes that have duplicate numbers, leaving only distinct numbers from the original list. Return the linked list sorted as well.\\n  Example 1:\\nInput: head = [1,2,3,3,4,4,5]\\nOutput: [1,2,5]\\nExample 2:\\nInput: head = [1,1,1,2,3]\\nOutput: [2,3]\\n  Constraints:\\nThe number of nodes in the list is in the range [0, 300].\\n-100 <= Node.val <= 100\\nThe list is guaranteed to be sorted in ascending order.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii\", \"title\": \"Remove Duplicates from Sorted List II\"}", "{\"content\": \"Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.\\n  Example 1:\\nInput: n = 3\\nOutput: [[1,2,3],[8,9,4],[7,6,5]]\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n  Constraints:\\n1 <= n <= 20\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/spiral-matrix-ii\", \"title\": \"Spiral Matrix II\"}", "{\"content\": \"Write a program to find the node at which the intersection of two singly linked lists begins.\\nFor example, the following two linked lists:\\nbegin to intersect at node c1.\\n  Example 1:\\nInput: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5], skipA = 2, skipB = 3\\nOutput: Reference of the node with value = 8\\nInput Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; There are 3 nodes before the intersected node in B.\\n  Example 2:\\nInput: intersectVal = 2, listA = [1,9,1,2,4], listB = [3,2,4], skipA = 3, skipB = 1\\nOutput: Reference of the node with value = 2\\nInput Explanation: The intersected node's value is 2 (note that this must not be 0 if the two lists intersect). From the head of A, it reads as [1,9,1,2,4]. From the head of B, it reads as [3,2,4]. There are 3 nodes before the intersected node in A; There are 1 node before the intersected node in B.\\n  Example 3:\\nInput: intersectVal = 0, listA = [2,6,4], listB = [1,5], skipA = 3, skipB = 2\\nOutput: null\\nInput Explanation: From the head of A, it reads as [2,6,4]. From the head of B, it reads as [1,5]. Since the two lists do not intersect, intersectVal must be 0, while skipA and skipB can be arbitrary values.\\nExplanation: The two lists do not intersect, so return null.\\n  Notes:\\nIf the two linked lists have no intersection at all, return null.\\nThe linked lists must retain their original structure after the function returns.\\nYou may assume there are no cycles anywhere in the entire linked structure.\\nEach value on each linked list is in the range [1, 10^9].\\nYour code should preferably run in O(n) time and use only O(1) memory.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/intersection-of-two-linked-lists\", \"title\": \"Intersection of Two Linked Lists\"}", "{\"content\": \"Write a program to solve a Sudoku puzzle by filling the empty cells.\\nA sudoku solution must satisfy all of the following rules:\\nEach of the digits 1-9 must occur exactly once in each row.\\nEach of the digits 1-9 must occur exactly once in each column.\\nEach of the digits 1-9 must occur exactly once in each of the 9 3x3 sub-boxes of the grid.\\nThe '.' character indicates empty cells.\\n  Example 1:\\nInput: boardnOutputnExplanation: The input board is shown above and the only valid solution is shown below:\\n  Constraints:\\nboard.length == 9\\nboard[i].length == 9\\nboard[i][j] is a digit or '.'.\\nIt is guaranteed that the input board has only one solution.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/sudoku-solver\", \"title\": \"Sudoku Solver\"}", "{\"content\": \"Given an array of strings strs, group the anagrams together. You can return the answer in any order.\\nAn Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.\\n  Example 1:\\nInput: strs = [\\\"eat\\\",\\\"tea\\\",\\\"tan\\\",\\\"ate\\\",\\\"nat\\\",\\\"bat\\\"]\\nOutput: [[\\\"bat\\\"],[\\\"nat\\\",\\\"tan\\\"],[\\\"ate\\\",\\\"eat\\\",\\\"tea\\\"]]\\nExample 2:\\nInput: strs = [\\\"\\\"]\\nOutput: [[\\\"\\\"]]\\nExample 3:\\nInput: strs = [\\\"a\\\"]\\nOutput: [[\\\"a\\\"]]\\n  Constraints:\\n1 <= strs.length <= 104\\n0 <= strs[i].length <= 100\\nstrs[i] consists of lower-case English letters.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/group-anagrams\", \"title\": \"Group Anagrams\"}", "{\"content\": \"Given the root of a binary tree and an integer targetSum, return true if the tree has a root-to-leaf path such that adding up all the values along the path equals targetSum.\\nA leaf is a node with no children.\\n  Example 1:\\nInput: root = [5,4,8,11,null,13,4,7,2,null,null,null,1], targetSum = 22\\nOutput: true\\nExample 2:\\nInput: root = [1,2,3], targetSum = 5\\nOutput: false\\nExample 3:\\nInput: root = [1,2], targetSum = 0\\nOutput: false\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 5000].\\n-1000 <= Node.val <= 1000\\n-1000 <= targetSum <= 1000\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/path-sum\", \"title\": \"Path Sum\"}", "{\"content\": \"Given an unsorted array of integers nums, return the length of the longest consecutive elements sequence.\\n  Example 1:\\nInput: nums = [100,4,200,1,3,2]\\nOutput: 4\\nExplanation: The longest consecutive elements sequence is [1, 2, 3, 4]. Therefore its length is 4.\\nExample 2:\\nInput: nums = [0,3,7,2,5,8,4,6,0,1]\\nOutput: 9\\n  Constraints:\\n0 <= nums.length <= 104\\n-109 <= nums[i] <= 109\\n  Follow up: Could you implement the O(n) solution?\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/longest-consecutive-sequence\", \"title\": \"Longest Consecutive Sequence\"}", "{\"content\": \"Given two sorted arrays nums1 and nums2 of size m and n respectively, return the median of the two sorted arrays.\\nFollow up: The overall run time complexity should be O(log (m+n)).\\n  Example 1:\\nInput: nums1 = [1,3], nums2 = [2]\\nOutput: 2.00000\\nExplanation: merged array = [1,2,3] and median is 2.\\nExample 2:\\nInput: nums1 = [1,2], nums2 = [3,4]\\nOutput: 2.50000\\nExplanation: merged array = [1,2,3,4] and median is (2 + 3) / 2 = 2.5.\\nExample 3:\\nInput: nums1 = [0,0], nums2 = [0,0]\\nOutput: 0.00000\\nExample 4:\\nInput: nums1 = [], nums2 = [1]\\nOutput: 1.00000\\nExample 5:\\nInput: nums1 = [2], nums2 = []\\nOutput: 2.00000\\n  Constraints:\\nnums1.length == m\\nnums2.length == n\\n0 <= m <= 1000\\n0 <= n <= 1000\\n1 <= m + n <= 2000\\n-106 <= nums1[i], nums2[i] <= 106\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/median-of-two-sorted-arrays\", \"title\": \"Median of Two Sorted Arrays\"}", "{\"content\": \"Given a string s, partition s such that every substring of the partition is a palindrome. Return all possible palindrome partitioning of s.\\nA palindrome string is a string that reads the same backward as forward.\\n  Example 1:\\nInput: s = \\\"aab\\\"\\nOutput: [[\\\"a\\\",\\\"a\\\",\\\"b\\\"],[\\\"aa\\\",\\\"b\\\"]]\\nExample 2:\\nInput: s = \\\"a\\\"\\nOutput: [[\\\"a\\\"]]\\n  Constraints:\\n1 <= s.length <= 16\\ns contains only lowercase English letters.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/palindrome-partitioning\", \"title\": \"Palindrome Partitioning\"}", "{\"content\": \"Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*' where:\\n'?' Matches any single character.\\n'*' Matches any sequence of characters (including the empty sequence).\\nThe matching should cover the entire input string (not partial).\\n  Example 1:\\nInput: s = \\\"aa\\\", p = \\\"a\\\"\\nOutput: false\\nExplanation: \\\"a\\\" does not match the entire string \\\"aa\\\".\\nExample 2:\\nInput: s = \\\"aa\\\", p = \\\"*\\\"\\nOutput: true\\nExplanation: '*' matches any sequence.\\nExample 3:\\nInput: s = \\\"cb\\\", p = \\\"?a\\\"\\nOutput: false\\nExplanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.\\nExample 4:\\nInput: s = \\\"adceb\\\", p = \\\"*a*b\\\"\\nOutput: true\\nExplanation: The first '*' matches the empty sequence, while the second '*' matches the substring \\\"dce\\\".\\nExample 5:\\nInput: s = \\\"acdcb\\\", p = \\\"a*c?b\\\"\\nOutput: false\\n  Constraints:\\n0 <= s.length, p.length <= 2000\\ns contains only lowercase English letters.\\np contains only lowercase English letters, '?' or '*'.\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/wildcard-matching\", \"title\": \"Wildcard Matching\"}", "{\"content\": \"Given inorder and postorder traversal of a tree, construct the binary tree.\\nNote:\\nYou may assume that duplicates do not exist in the tree.\\nFor example, given\\ninorder = [9,3,15,20,7]\\npostorder = [9,15,7,20,3]\\nReturn the following binary tree:\\n    3\\n   / \\\\\\n  9  20\\n    /  \\\\\\n   15   7\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal\", \"title\": \"Construct Binary Tree from Inorder and Postorder Traversal\"}", "{\"content\": \"Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\\nNote: For the purpose of this problem, we define empty string as valid palindrome.\\nExample 1:\\nInput: \\\"A man, a plan, a canal: Panama\\\"\\nOutput: true\\nExample 2:\\nInput: \\\"race a car\\\"\\nOutput: false\\n  Constraints:\\ns consists only of printable ASCII characters.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/valid-palindrome\", \"title\": \"Valid Palindrome\"}", "{\"content\": \"Say you have an array prices for which the ith element is the price of a given stock on day i.\\nDesign an algorithm to find the maximum profit. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times).\\nNote: You may not engage in multiple transactions at the same time (i.e., you must sell the stock before you buy again).\\nExample 1:\\nInput: [7,1,5,3,6,4]\\nOutput: 7\\nExplanation: Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4.\\n             Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3.\\nExample 2:\\nInput: [1,2,3,4,5]\\nOutput: 4\\nExplanation: Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4.\\n             Note that you cannot buy on day 1, buy on day 2 and sell them later, as you are\\n             engaging multiple transactions at the same time. You must sell before buying again.\\nExample 3:\\nInput: [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transaction is done, i.e. max profit = 0.\\n  Constraints:\\n1 <= prices.length <= 3 * 10 ^ 4\\n0 <= prices[i] <= 10 ^ 4\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/best-time-to-buy-and-sell-stock-ii\", \"title\": \"Best Time to Buy and Sell Stock II\"}", "{\"content\": \"Given the root of a binary tree, return its maximum depth.\\nA binary tree's maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.\\n  Example 1:\\nInput: root = [3,9,20,null,null,15,7]\\nOutput: 3\\nExample 2:\\nInput: root = [1,null,2]\\nOutput: 2\\nExample 3:\\nInput: root = []\\nOutput: 0\\nExample 4:\\nInput: root = [0]\\nOutput: 1\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 104].\\n-100 <= Node.val <= 100\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/maximum-depth-of-binary-tree\", \"title\": \"Maximum Depth of Binary Tree\"}", "{\"content\": \"Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array nums = [0,1,2,4,5,6,7] might become:\\n[4,5,6,7,0,1,2] if it was rotated 4 times.\\n[0,1,2,4,5,6,7] if it was rotated 7 times.\\nNotice that rotating an array [a[0], a[1], a[2], ..., a[n-1]] 1 time results in the array [a[n-1], a[0], a[1], a[2], ..., a[n-2]].\\nGiven the sorted rotated array nums, return the minimum element of this array.\\n  Example 1:\\nInput: nums = [3,4,5,1,2]\\nOutput: 1\\nExplanation: The original array was [1,2,3,4,5] rotated 3 times.\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2]\\nOutput: 0\\nExplanation: The original array was [0,1,2,4,5,6,7] and it was rotated 4 times.\\nExample 3:\\nInput: nums = [11,13,15,17]\\nOutput: 11\\nExplanation: The original array was [11,13,15,17] and it was rotated 4 times. \\n  Constraints:\\nn == nums.length\\n1 <= n <= 5000\\n-5000 <= nums[i] <= 5000\\nAll the integers of nums are unique.\\nnums is sorted and rotated between 1 and n times.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/find-minimum-in-rotated-sorted-array\", \"title\": \"Find Minimum in Rotated Sorted Array\"}", "{\"content\": \"Sort a linked list using insertion sort.\\n\\nA graphical example of insertion sort. The partial sorted list (black) initially contains only the first element in the list.\\nWith each iteration one element (red) is removed from the input data and inserted in-place into the sorted list\\n  Algorithm of Insertion Sort:\\nInsertion sort iterates, consuming one input element each repetition, and growing a sorted output list.\\nAt each iteration, insertion sort removes one element from the input data, finds the location it belongs within the sorted list, and inserts it there.\\nIt repeats until no input elements remain.\\n\\nExample 1:\\nInput: 4->2->1->3\\nOutput: 1->2->3->4\\nExample 2:\\nInput: -1->5->3->4->0\\nOutput: -1->0->3->4->5\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/insertion-sort-list\", \"title\": \"Insertion Sort List\"}", "{\"content\": \"Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.\\n  Example 1:\\nInput: nums = [1,1,2]\\nOutput:\\n[[1,1,2],\\n [1,2,1],\\n [2,1,1]]\\nExample 2:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\n  Constraints:\\n1 <= nums.length <= 8\\n-10 <= nums[i] <= 10\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/permutations-ii\", \"title\": \"Permutations II\"}", "{\"content\": \"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.\\n  Example 1:\\nInput: nums = [1,3,5,6], target = 5\\nOutput: 2\\nExample 2:\\nInput: nums = [1,3,5,6], target = 2\\nOutput: 1\\nExample 3:\\nInput: nums = [1,3,5,6], target = 7\\nOutput: 4\\nExample 4:\\nInput: nums = [1,3,5,6], target = 0\\nOutput: 0\\nExample 5:\\nInput: nums = [1], target = 0\\nOutput: 0\\n  Constraints:\\n1 <= nums.length <= 104\\n-104 <= nums[i] <= 104\\nnums contains distinct values sorted in ascending order.\\n-104 <= target <= 104\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/search-insert-position\", \"title\": \"Search Insert Position\"}", "{\"content\": \"Given the root of a binary tree, return the inorder traversal of its nodes' values.\\n  Example 1:\\nInput: root = [1,null,2,3]\\nOutput: [1,3,2]\\nExample 2:\\nInput: root = []\\nOutput: []\\nExample 3:\\nInput: root = [1]\\nOutput: [1]\\nExample 4:\\nInput: root = [1,2]\\nOutput: [2,1]\\nExample 5:\\nInput: root = [1,null,2]\\nOutput: [1,2]\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 100].\\n-100 <= Node.val <= 100\\n  Follow up:\\nRecursive solution is trivial, could you do it iteratively?\\n \", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/binary-tree-inorder-traversal\", \"title\": \"Binary Tree Inorder Traversal\"}", "{\"content\": \"Given a non-empty string s and a dictionary wordDict containing a list of non-empty words, add spaces in s to construct a sentence where each word is a valid dictionary word. Return all such possible sentences.\\nNote:\\nThe same word in the dictionary may be reused multiple times in the segmentation.\\nYou may assume the dictionary does not contain duplicate words.\\nExample 1:\\nInput:\\ns = \\\"catsanddog\\\"\\nwordDict = [\\\"cat\\\", \\\"cats\\\", \\\"and\\\", \\\"sand\\\", \\\"dog\\\"]\\nOutput:\\n[\\n  \\\"cats and dog\\\",\\n  \\\"cat sand dog\\\"\\n]\\nExample 2:\\nInput:\\ns = \\\"pineapplepenapple\\\"\\nwordDict = [\\\"apple\\\", \\\"pen\\\", \\\"applepen\\\", \\\"pine\\\", \\\"pineapple\\\"]\\nOutput:\\n[\\n  \\\"pine apple pen apple\\\",\\n  \\\"pineapple pen apple\\\",\\n  \\\"pine applepen apple\\\"\\n]\\nExplanation: Note that you are allowed to reuse a dictionary word.\\nExample 3:\\nInput:\\ns = \\\"catsandog\\\"\\nwordDict = [\\\"cats\\\", \\\"dog\\\", \\\"sand\\\", \\\"and\\\", \\\"cat\\\"]\\nOutput:\\n[]\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/word-break-ii\", \"title\": \"Word Break II\"}", "{\"content\": \"A linked list of length n is given such that each node contains an additional random pointer, which could point to any node in the list, or null.\\nConstruct a deep copy of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. None of the pointers in the new list should point to nodes in the original list.\\nFor example, if there are two nodes X and Y in the original list, where X.random --> Y, then for the corresponding two nodes x and y in the copied list, x.random --> y.\\nReturn the head of the copied linked list.\\nThe linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of [val, random_index] where:\\nval: an integer representing Node.val\\nrandom_index: the index of the node (range from 0 to n-1) that the random pointer points to, or null if it does not point to any node.\\nYour code will only be given the head of the original linked list.\\n  Example 1:\\nInput: head = [[7,null],[13,0],[11,4],[10,2],[1,0]]\\nOutput: [[7,null],[13,0],[11,4],[10,2],[1,0]]\\nExample 2:\\nInput: head = [[1,1],[2,1]]\\nOutput: [[1,1],[2,1]]\\nExample 3:\\nInput: head = [[3,null],[3,0],[3,null]]\\nOutput: [[3,null],[3,0],[3,null]]\\nExample 4:\\nInput: head = []\\nOutput: []\\nExplanation: The given linked list is empty (null pointer), so return null.\\n  Constraints:\\n0 <= n <= 1000\\n-10000 <= Node.val <= 10000\\nNode.random is null or is pointing to some node in the linked list.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/copy-list-with-random-pointer\", \"title\": \"Copy List with Random Pointer\"}", "{\"content\": \"Given an integer n, return all the structurally unique BST's (binary search trees), which has exactly n nodes of unique values from 1 to n. Return the answer in any order.\\n  Example 1:\\nInput: n = 3\\nOutput: [[1,null,2,null,3],[1,null,3,2],[2,1,3],[3,1,null,null,2],[3,2,null,1]]\\nExample 2:\\nInput: n = 1\\nOutput: [[1]]\\n  Constraints:\\n1 <= n <= 8\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/unique-binary-search-trees-ii\", \"title\": \"Unique Binary Search Trees II\"}", "{\"content\": \"You are given an array prices where prices[i] is the price of a given stock on the ith day.\\nYou want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.\\nReturn the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.\\n  Example 1:\\nInput: prices = [7,1,5,3,6,4]\\nOutput: 5\\nExplanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.\\nNote that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.\\nExample 2:\\nInput: prices = [7,6,4,3,1]\\nOutput: 0\\nExplanation: In this case, no transactions are done and the max profit = 0.\\n  Constraints:\\n1 <= prices.length <= 105\\n0 <= prices[i] <= 104\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/best-time-to-buy-and-sell-stock\", \"title\": \"Best Time to Buy and Sell Stock\"}", "{\"content\": \"Given a string s, return the longest palindromic substring in s.\\n  Example 1:\\nInput: s = \\\"babad\\\"\\nOutput: \\\"bab\\\"\\nNote: \\\"aba\\\" is also a valid answer.\\nExample 2:\\nInput: s = \\\"cbbd\\\"\\nOutput: \\\"bb\\\"\\nExample 3:\\nInput: s = \\\"a\\\"\\nOutput: \\\"a\\\"\\nExample 4:\\nInput: s = \\\"ac\\\"\\nOutput: \\\"a\\\"\\n  Constraints:\\n1 <= s.length <= 1000\\ns consist of only digits and English letters (lower-case and/or upper-case),\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/longest-palindromic-substring\", \"title\": \"Longest Palindromic Substring\"}", "{\"content\": \"Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in any order.\\nA mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.\\n  Example 1:\\nInput: digits = \\\"23\\\"\\nOutput: [\\\"ad\\\",\\\"ae\\\",\\\"af\\\",\\\"bd\\\",\\\"be\\\",\\\"bf\\\",\\\"cd\\\",\\\"ce\\\",\\\"cf\\\"]\\nExample 2:\\nInput: digits = \\\"\\\"\\nOutput: []\\nExample 3:\\nInput: digits = \\\"2\\\"\\nOutput: [\\\"a\\\",\\\"b\\\",\\\"c\\\"]\\n  Constraints:\\n0 <= digits.length <= 4\\ndigits[i] is a digit in the range ['2', '9'].\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/letter-combinations-of-a-phone-number\", \"title\": \"Letter Combinations of a Phone Number\"}", "{\"content\": \"Given an integer x, return true if x is palindrome integer.\\nAn integer is a palindrome when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.\\n  Example 1:\\nInput: x = 121\\nOutput: true\\nExample 2:\\nInput: x = -121\\nOutput: false\\nExplanation: From left to right, it reads -121. From right to left, it becomes 121-. Therefore it is not a palindrome.\\nExample 3:\\nInput: x = 10\\nOutput: false\\nExplanation: Reads 01 from right to left. Therefore it is not a palindrome.\\nExample 4:\\nInput: x = -101\\nOutput: false\\n  Constraints:\\n-231 <= x <= 231 - 1\\n  Follow up: Could you solve it without converting the integer to a string?\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/palindrome-number\", \"title\": \"Palindrome Number\"}", "{\"content\": \"Given head, the head of a linked list, determine if the linked list has a cycle in it.\\nThere is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail's next pointer is connected to. Note that pos is not passed as a parameter.\\nReturn true if there is a cycle in the linked list. Otherwise, return false.\\n  Example 1:\\nInput: head = [3,2,0,-4], pos = 1\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 1st node (0-indexed).\\nExample 2:\\nInput: head = [1,2], pos = 0\\nOutput: true\\nExplanation: There is a cycle in the linked list, where the tail connects to the 0th node.\\nExample 3:\\nInput: head = [1], pos = -1\\nOutput: false\\nExplanation: There is no cycle in the linked list.\\n  Constraints:\\nThe number of the nodes in the list is in the range [0, 104].\\n-105 <= Node.val <= 105\\npos is -1 or a valid index in the linked-list.\\n  Follow up: Can you solve it using O(1) (i.e. constant) memory?\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/linked-list-cycle\", \"title\": \"Linked List Cycle\"}", "{\"content\": \"A robot is located at the top-left corner of a m x n grid (marked 'Start' in the diagram below).\\nThe robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked 'Finish' in the diagram below).\\nHow many possible unique paths are there?\\n  Example 1:\\nInput: m = 3, n = 7\\nOutput: 28\\nExample 2:\\nInput: m = 3, n = 2\\nOutput: 3\\nExplanation:\\nFrom the top-left corner, there are a total of 3 ways to reach the bottom-right corner:\\n1. Right -> Down -> Down\\n2. Down -> Down -> Right\\n3. Down -> Right -> Down\\nExample 3:\\nInput: m = 7, n = 3\\nOutput: 28\\nExample 4:\\nInput: m = 3, n = 3\\nOutput: 6\\n  Constraints:\\n1 <= m, n <= 100\\nIt's guaranteed that the answer will be less than or equal to 2 * 109.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/unique-paths\", \"title\": \"Unique Paths\"}", "{\"content\": \"Given a triangle array, return the minimum path sum from top to bottom.\\nFor each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.\\n  Example 1:\\nInput: triangle = [[2],[3,4],[6,5,7],[4,1,8,3]]\\nOutput: 11\\nExplanation: The triangle looks like:\\n   2\\n  3 4\\n 6 5 7\\n4 1 8 3\\nThe minimum path sum from top to bottom is 2 + 3 + 5 + 1 = 11 (underlined above).\\nExample 2:\\nInput: triangle = [[-10]]\\nOutput: -10\\n  Constraints:\\n1 <= triangle.length <= 200\\ntriangle[0].length == 1\\ntriangle[i].length == triangle[i - 1].length + 1\\n-104 <= triangle[i][j] <= 104\\n  Follow up: Could you do this using only O(n) extra space, where n is the total number of rows in the triangle?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/triangle\", \"title\": \"Triangle\"}", "{\"content\": \"Given n non-negative integers representing the histogram's bar height where the width of each bar is 1, find the area of largest rectangle in the histogram.\\n \\nAbove is a histogram where width of each bar is 1, given height = [2,1,5,6,2,3].\\n \\nThe largest rectangle is shown in the shaded area, which has area = 10 unit.\\n  Example:\\nInput: [2,1,5,6,2,3]\\nOutput: 10\\n  Example 1:\\nInput: heights = [2,1,5,6,2,3]\\nOutput: 10\\nExplanation: The above is a histogram where width of each bar is 1.\\nThe largest rectangle is shown in the red area, which has an area = 10 units.\\nExample 2:\\nInput: heights = [2,4]\\nOutput: 4\\n  Constraints:\\n1 <= heights.length <= 105\\n0 <= heights[i] <= 104\", \"difficulty\": \"Hard\", \"link\": \"https://leetcode.com/problems/largest-rectangle-in-histogram\", \"title\": \"Largest Rectangle in Histogram\"}", "{\"content\": \"Given the root of a binary tree, flatten the tree into a \\\"linked list\\\":\\nThe \\\"linked list\\\" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.\\nThe \\\"linked list\\\" should be in the same order as a pre-order traversal of the binary tree.\\n  Example 1:\\nInput: root = [1,2,5,3,4,null,6]\\nOutput: [1,null,2,null,3,null,4,null,5,null,6]\\nExample 2:\\nInput: root = []\\nOutput: []\\nExample 3:\\nInput: root = [0]\\nOutput: [0]\\n  Constraints:\\nThe number of nodes in the tree is in the range [0, 2000].\\n-100 <= Node.val <= 100\\n  Follow up: Can you flatten the tree in-place (with O(1) extra space)?\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/flatten-binary-tree-to-linked-list\", \"title\": \"Flatten Binary Tree to Linked List\"}", "{\"content\": \"Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.\\nEach number in candidates may only be used once in the combination.\\nNote: The solution set must not contain duplicate combinations.\\n  Example 1:\\nInput: candidates = [10,1,2,7,6,1,5], target = 8\\nOutput: \\n[\\n[1,1,6],\\n[1,2,5],\\n[1,7],\\n[2,6]\\n]\\nExample 2:\\nInput: candidates = [2,5,2,1,2], target = 5\\nOutput: \\n[\\n[1,2,2],\\n[5]\\n]\\n  Constraints:\\n1 <= candidates.length <= 100\\n1 <= candidates[i] <= 50\\n1 <= target <= 30\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/combination-sum-ii\", \"title\": \"Combination Sum II\"}", "{\"content\": \"There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].\\nYou have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.\\nGiven two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique\\n  Example 1:\\nInput: gas = [1,2,3,4,5], cost = [3,4,5,1,2]\\nOutput: 3\\nExplanation:\\nStart at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 4. Your tank = 4 - 1 + 5 = 8\\nTravel to station 0. Your tank = 8 - 2 + 1 = 7\\nTravel to station 1. Your tank = 7 - 3 + 2 = 6\\nTravel to station 2. Your tank = 6 - 4 + 3 = 5\\nTravel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.\\nTherefore, return 3 as the starting index.\\nExample 2:\\nInput: gas = [2,3,4], cost = [3,4,3]\\nOutput: -1\\nExplanation:\\nYou can't start at station 0 or 1, as there is not enough gas to travel to the next station.\\nLet's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4\\nTravel to station 0. Your tank = 4 - 3 + 2 = 3\\nTravel to station 1. Your tank = 3 - 3 + 3 = 3\\nYou cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.\\nTherefore, you can't travel around the circuit once no matter where you start.\\n  Constraints:\\ngas.length == n\\ncost.length == n\\n1 <= n <= 104\\n0 <= gas[i], cost[i] <= 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/gas-station\", \"title\": \"Gas Station\"}", "{\"content\": \"Given an array nums of distinct integers, return all the possible permutations. You can return the answer in any order.\\n  Example 1:\\nInput: nums = [1,2,3]\\nOutput: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]\\nExample 2:\\nInput: nums = [0,1]\\nOutput: [[0,1],[1,0]]\\nExample 3:\\nInput: nums = [1]\\nOutput: [[1]]\\n  Constraints:\\n1 <= nums.length <= 6\\n-10 <= nums[i] <= 10\\nAll the integers of nums are unique.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/permutations\", \"title\": \"Permutations\"}", "{\"content\": \"Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).\\nFor example, this binary tree [1,2,2,3,4,4,3] is symmetric:\\n    1\\n   / \\\\\\n  2   2\\n / \\\\ / \\\\\\n3  4 4  3\\n  But the following [1,2,2,null,3,null,3] is not:\\n    1\\n   / \\\\\\n  2   2\\n   \\\\   \\\\\\n   3    3\\n  Follow up: Solve it both recursively and iteratively.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/symmetric-tree\", \"title\": \"Symmetric Tree\"}", "{\"content\": \"Given a string s consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return 0.\\nA word is a maximal substring consisting of non-space characters only.\\n  Example 1:\\nInput: s = \\\"Hello World\\\"\\nOutput: 5\\nExample 2:\\nInput: s = \\\" \\\"\\nOutput: 0\\n  Constraints:\\n1 <= s.length <= 104\\ns consists of only English letters and spaces ' '.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/length-of-last-word\", \"title\": \"Length of Last Word\"}", "{\"content\": \"You are given an integer array nums sorted in ascending order (with distinct values), and an integer target.\\nSuppose that nums is rotated at some pivot unknown to you beforehand (i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).\\nIf target is found in the array return its index, otherwise, return -1.\\n  Example 1:\\nInput: nums = [4,5,6,7,0,1,2], target = 0\\nOutput: 4\\nExample 2:\\nInput: nums = [4,5,6,7,0,1,2], target = 3\\nOutput: -1\\nExample 3:\\nInput: nums = [1], target = 0\\nOutput: -1\\n  Constraints:\\n1 <= nums.length <= 5000\\n-104 <= nums[i] <= 104\\nAll values of nums are unique.\\nnums is guaranteed to be rotated at some pivot.\\n-104 <= target <= 104\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/search-in-rotated-sorted-array\", \"title\": \"Search in Rotated Sorted Array\"}", "{\"content\": \"Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2, also represented as a string.\\nNote: You must not use any built-in BigInteger library or convert the inputs to integer directly.\\n  Example 1:\\nInput: num1 = \\\"2\\\", num2 = \\\"3\\\"\\nOutput: \\\"6\\\"\\nExample 2:\\nInput: num1 = \\\"123\\\", num2 = \\\"456\\\"\\nOutput: \\\"56088\\\"\\n  Constraints:\\n1 <= num1.length, num2.length <= 200\\nnum1 and num2 consist of digits only.\\nBoth num1 and num2 do not contain any leading zero, except the number 0 itself.\", \"difficulty\": \"Medium\", \"link\": \"https://leetcode.com/problems/multiply-strings\", \"title\": \"Multiply Strings\"}", "{\"content\": \"Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.\\npush(x) -- Push element x onto stack.\\npop() -- Removes the element on top of the stack.\\ntop() -- Get the top element.\\ngetMin() -- Retrieve the minimum element in the stack.\\n  Example 1:\\nInput\\n[\\\"MinStack\\\",\\\"push\\\",\\\"push\\\",\\\"push\\\",\\\"getMin\\\",\\\"pop\\\",\\\"top\\\",\\\"getMin\\\"]\\n[[],[-2],[0],[-3],[],[],[],[]]\\n\\nOutput\\n[null,null,null,null,-3,null,0,-2]\\n\\nExplanation\\nMinStack minStack = new MinStack();\\nminStack.push(-2);\\nminStack.push(0);\\nminStack.push(-3);\\nminStack.getMin(); // return -3\\nminStack.pop();\\nminStack.top();    // return 0\\nminStack.getMin(); // return -2\\n  Constraints:\\nMethods pop, top and getMin operations will always be called on non-empty stacks.\", \"difficulty\": \"Easy\", \"link\": \"https://leetcode.com/problems/min-stack\", \"title\": \"Min Stack\"}"], "name": "whole problems"}